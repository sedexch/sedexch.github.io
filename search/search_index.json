{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the Documentation for the official sedex-Client Docker Image What is sedex-Client? sedex stands for secure data exchange and is a service of the Swiss Federal Statistical Office (FSO) that integrates business applications in the Swiss e-Government sector. At its core, the sedex platform is a message-oriented middleware designed for secure asynchronous data exchange between business applications of different organizational units. In specific cases, synchronous data exchange (SOAP and RESTful web services) also takes place. The sedex platform is highly available (24/7). The sedex-client is a software which is installed at the business applications and offers the interface between the business applications and the remote sedex server as a message hub. Further details about the internal structure of the sedex client can be found in the section sedex System . Documentation This documentation describes how to run a containerized version of the sedex-Client and is devided into the following top level sections: Overview of the sedex System sedex-client Container Version 6 Contact sedex Support Docker image of the sedex-client The Docker image of the sedex client is publicly available in different versions (tags) on the Docker Hub at hub.docker.com/r/sedexch/sedex-client Alternative to the Docker Container: Classic Installation If you do not want to run the sedex client as a container and instead want to install it yourself on your operating system, you can find the necessary installer and the associated instructions at www.sedex.ch .","title":"Documentation Home"},{"location":"index.html#welcome-to-the-documentation-for-the-official-sedex-client-docker-image","text":"","title":"Welcome to the Documentation for the official sedex-Client Docker Image"},{"location":"index.html#what-is-sedex-client","text":"sedex stands for secure data exchange and is a service of the Swiss Federal Statistical Office (FSO) that integrates business applications in the Swiss e-Government sector. At its core, the sedex platform is a message-oriented middleware designed for secure asynchronous data exchange between business applications of different organizational units. In specific cases, synchronous data exchange (SOAP and RESTful web services) also takes place. The sedex platform is highly available (24/7). The sedex-client is a software which is installed at the business applications and offers the interface between the business applications and the remote sedex server as a message hub. Further details about the internal structure of the sedex client can be found in the section sedex System .","title":"What is sedex-Client?"},{"location":"index.html#documentation","text":"This documentation describes how to run a containerized version of the sedex-Client and is devided into the following top level sections: Overview of the sedex System sedex-client Container Version 6 Contact sedex Support","title":"Documentation"},{"location":"index.html#docker-image-of-the-sedex-client","text":"The Docker image of the sedex client is publicly available in different versions (tags) on the Docker Hub at hub.docker.com/r/sedexch/sedex-client","title":"Docker image of the sedex-client"},{"location":"index.html#alternative-to-the-docker-container-classic-installation","text":"If you do not want to run the sedex client as a container and instead want to install it yourself on your operating system, you can find the necessary installer and the associated instructions at www.sedex.ch .","title":"Alternative to the Docker Container: Classic Installation"},{"location":"contact.html","text":"Contacting sedex sedex customer support is here for you and happy to help. sedexsupport@bfs.admin.ch For more contact options, please visit www.sedex.ch .","title":"Contact"},{"location":"contact.html#contacting-sedex","text":"sedex customer support is here for you and happy to help. sedexsupport@bfs.admin.ch For more contact options, please visit www.sedex.ch .","title":"Contacting sedex"},{"location":"faq.html","text":"Frequently Asked Questions (FAQ) On this page you will find answers to frequently asked questions. Of course, you may also ask your question directly to us . Tip To quickly get to a specific question, you can use the table of contents in the right margin. General Questions about sedex Can I use sedex for data transfer in my business case? sedex is the platform of the Swiss Confederation for secure, traceable and reliable data transport between business applications in the area of e-Government at the federal, cantonal and municipal levels. If there is a regulatory basis, third-party applications can also be integrated via sedex. If you are interested, please contact sedex . General Questions about the sedex Client Container Image Should I use the container version already now? For more than 13 years, the sedex client has been available as a classic installation for multiple operating systems. This classic operating mode has proven itself and there is a lot of experience with it. If you can run applications classically on hardware servers or in virtual machines, we still recommend this variant for the time being. For a few months now, we have been offering a parallel pre-release version of the sedex client as a Docker image for operation as a container. At the moment, we are deliberately calling this version EXPERIMENTAL to make it clear that this version is not yet intended for the general public and that changes may still be made to the image. However, if you have the necessary infrastructure and know-how for running containers, you can already run the sedex client as a Docker container in consultation with sedex. We expect to release the sedex client Docker image as official version \"1.0\" in 2021. Why is the sedex client image currently still pre-release? There are already several productive sedex clients running successfully on the basis of the sedex client image. Since sedex use cases are usually business-critical and have to work stably, we want to run a pilot phase with a few containers first to gain experience in a manageable size and closely accompanied by sedex. As soon as we can be sure that there are no problems in the image, we will make it generally available as a \"1.0\" version. We expect to release the sedex client Docker image as official version \"1.0\" in 2021.","title":"FAQ"},{"location":"faq.html#frequently-asked-questions-faq","text":"On this page you will find answers to frequently asked questions. Of course, you may also ask your question directly to us . Tip To quickly get to a specific question, you can use the table of contents in the right margin.","title":"Frequently Asked Questions (FAQ)"},{"location":"faq.html#general-questions-about-sedex","text":"","title":"General Questions about sedex"},{"location":"faq.html#can-i-use-sedex-for-data-transfer-in-my-business-case","text":"sedex is the platform of the Swiss Confederation for secure, traceable and reliable data transport between business applications in the area of e-Government at the federal, cantonal and municipal levels. If there is a regulatory basis, third-party applications can also be integrated via sedex. If you are interested, please contact sedex .","title":"Can I use sedex for data transfer in my business case?"},{"location":"faq.html#general-questions-about-the-sedex-client-container-image","text":"","title":"General Questions about the sedex Client Container Image"},{"location":"faq.html#should-i-use-the-container-version-already-now","text":"For more than 13 years, the sedex client has been available as a classic installation for multiple operating systems. This classic operating mode has proven itself and there is a lot of experience with it. If you can run applications classically on hardware servers or in virtual machines, we still recommend this variant for the time being. For a few months now, we have been offering a parallel pre-release version of the sedex client as a Docker image for operation as a container. At the moment, we are deliberately calling this version EXPERIMENTAL to make it clear that this version is not yet intended for the general public and that changes may still be made to the image. However, if you have the necessary infrastructure and know-how for running containers, you can already run the sedex client as a Docker container in consultation with sedex. We expect to release the sedex client Docker image as official version \"1.0\" in 2021.","title":"Should I use the container version already now?"},{"location":"faq.html#why-is-the-sedex-client-image-currently-still-pre-release","text":"There are already several productive sedex clients running successfully on the basis of the sedex client image. Since sedex use cases are usually business-critical and have to work stably, we want to run a pilot phase with a few containers first to gain experience in a manageable size and closely accompanied by sedex. As soon as we can be sure that there are no problems in the image, we will make it generally available as a \"1.0\" version. We expect to release the sedex client Docker image as official version \"1.0\" in 2021.","title":"Why is the sedex client image currently still pre-release?"},{"location":"versions-and-changes.html","text":"Versions and Changes This page explains the structure of version numbers and how version numbers are mapped to Docker container tags of images. The major changes of each version are listed. About Version Numbers The full version number of a sedex container image consists of two composite version numbers of the contained compoents, as shown in the following table: Component Version number full version number for the complete container image 6.0.6_container-0.99-beta version of the sedex client contained in the container 6.0.6 version of the container logic container-0.99-beta About Docker Hub Tags of an Image Each sedex container image on Docker Hub is tagged with multiple tags representing the different version numbers: Tag Meaning of the Tag 6.0.6_container-0.99-beta The full version tag references the sedex container image with the specific client and the specific container version. 6.0.6 The version tag containing only the sedex Client version references the most current sedex container image with the specific client. latest The version tag latest references the most current sedex container image with the most current client. Versions and Changes Version/Tag 6.0.6_container-0.99-beta (2021-07-12) New sedex Client 6.0.6 This release does not introduce any new functionality, but resolves issues and improves some operational aspects of the sedex client. Includes changes from version 5.0.5 and 5.0.6. Fix: During each startup, the sedex client automatically checks that it has write per-mission on all required folders and files and aborts the startup if the check is not com-pletely successful. This check also includes the messaging interface folders (outbox, inbox, receipts, processed). If a business application or an administrator creates files in one of these folders using a different user, the sedex client may not have write per-mission on these externally created files and the check will fail during the next startup of the sedex client. This version fixes the problem by checking only the folders for ex-isting write permissions, but not the individual files. Fix: In rare situations, problems could occur under Windows when receiving sedex messages if non-ASCII special characters were used in the file name. This version fix-es the problem by using UTF-8 for the internal encoding, even if the operating system specifies a different encoding. Improvement: The workaround introduced in 6.0.5 resulted in a log entry at WARN level on \"IBM Java\" (AIX, Linux), which is now at (the more appropriate) INFO level, since IBM Java is not affected. Fix: When retrieving the monitoring page of the sedex client version 6.0.4 via http (http://[host]:[port]/monitoring), the web server may be blocking in certain cases due to race conditions. This version fixes the problem. Workaround: The JVM Java 8 Update 291 and 292 from April 2021 (other versions are not affected) contain a known issue that causes the sedex client to fail to renew the participant certificate. This can lead to the error message \"NoSuchAlgorithmExcep-tion: unrecognized algorithm name\" in sedex-controller-technical.log. The sedex client version 6.0.5 contains a specific enhancement which works around this JVM error. Nevertheless, we recommend switching to a newer JVM free of this issue as soon as it will become available. (This change is not relevant for the container version as it is based on a different JVM version.) Update: The certificate with which remote update packages for the sedex client are digitally signed has been renewed. The corresponding truststore has been extended by this new certificate. Update: QuoVadis has revoked one of its intermediate certificates due to policy changes and replaced it with a new one. The corresponding truststore has been ad-justed. Note: Older sedex clients automatically download the latest truststore from the sedex server. New Container logic 0.99-beta New Feature: Configuration parameters for the sedex client can now also be passed to the sedex client as environment parameters (ENV parameters) of the container. As before, the configuration parameters can be set in the central client configuration file sedex-data/conf/sedex-client-configuration.properties. But now they can also be set as ENV parameters. The ENV parameter has the higher priority, i.e. if a value is defined in both places, the value of the ENV parameter is used. Fix: When using self-created user and group for the container, some scripts in the container could not be executed correctly under certain circumstances, which could lead to a non-functioning sedex client. This problem is fixed in this version. Version/Tag 6.0.4_container-0.99-beta (2021-04-07) New sedex Client 6.0.4 This release does not introduce any new functionality, but improves some operational and security aspects of the sedex client and its installation program. Improvement: Changes to WS-Proxy user permissions are applied automatically without a restart. Since version 6.0.x, the sedex client offers the feature of assigning a user name and password to business applications in the configuration file /conf/sedex-wsproxy-user-configuration.properties. This allows partici-pants themselves to control which web services offered by the sedex WS-Proxy their business applications have access to. In previous versions of sedex Client (6.0.2 and 6.0.3), it was necessary to restart the WS-Proxy after changing this configuration file in order to apply the new permissions. As of sedex Client version 6.0.4, a restart is no longer required after changes to the sedex-wsproxy-user-configuration.properties file. WS-Proxy watches this file and detects changes during normal operation and applies them automatically. Whether the changes could be applied correctly can be seen from the technical logfile of the WS-Proxy and is in part also shown on the monitoring page of the WS-Proxy. Change: New default RMI port. The three processes controller, adapter, WSProxy of the sedex client communicate with each other via an RMI server. The sedex clients from version 6.0.4 cannot use an RMI server of an older client and therefore need a separate RMI server. The new RMI server now uses port 11899 by default. (Older sedex clients 5.x use port 11099 and sedex clients 6.0.2/6.0.3 use port 11999 by de-fault). Of course, the RMI port to be used can be reconfigured in the sedex-client-configuration.properties file if necessary. Please consult the sedex client manual for details. (This change is not relevant for the container version as this communication is encapsulated in the container.) Change: Optional Restriction of access rights on new Windows installations. On the Windows operating system, the installer program now can adjust the default per-missions on the folders of the sedex client. It can limit access to the installing user, the built-in group Administrators and the built-in user SYSTEM. If chosen, all other users and groups will per default have no access to the sedex installation folder. After the in-stallation/migration the folder permission have to be adjusted manually by the adminis-trator so that other authorized users and end-user applications have access to the re-quired folders. Please consult the sedex client manual for details. (This change is not relevant for the container version as it is Linux based.) Improvement: Minor internal client improvements. Several dependencies/libraries have been updated and a few minor internal improvements to the client have been made. These internal improvements have no impact on the functionality, but will make it easier to run in a Docker container, for example. Previous Versions Older versions of the sedex container images had internal test character and are therefore not described in detail here. If you are interested in the version history of the sedex client and the corresponding changes, you can find these in the separate document Release Notes in the download area of www.sedex.ch .","title":"Versions & Changes"},{"location":"versions-and-changes.html#versions-and-changes","text":"This page explains the structure of version numbers and how version numbers are mapped to Docker container tags of images. The major changes of each version are listed.","title":"Versions and Changes"},{"location":"versions-and-changes.html#about-version-numbers","text":"The full version number of a sedex container image consists of two composite version numbers of the contained compoents, as shown in the following table: Component Version number full version number for the complete container image 6.0.6_container-0.99-beta version of the sedex client contained in the container 6.0.6 version of the container logic container-0.99-beta","title":"About Version Numbers"},{"location":"versions-and-changes.html#about-docker-hub-tags-of-an-image","text":"Each sedex container image on Docker Hub is tagged with multiple tags representing the different version numbers: Tag Meaning of the Tag 6.0.6_container-0.99-beta The full version tag references the sedex container image with the specific client and the specific container version. 6.0.6 The version tag containing only the sedex Client version references the most current sedex container image with the specific client. latest The version tag latest references the most current sedex container image with the most current client.","title":"About Docker Hub Tags of an Image"},{"location":"versions-and-changes.html#versions-and-changes_1","text":"","title":"Versions and Changes"},{"location":"versions-and-changes.html#versiontag-606_container-099-beta-2021-07-12","text":"","title":"Version/Tag 6.0.6_container-0.99-beta (2021-07-12)"},{"location":"versions-and-changes.html#versiontag-604_container-099-beta-2021-04-07","text":"","title":"Version/Tag 6.0.4_container-0.99-beta (2021-04-07)"},{"location":"versions-and-changes.html#previous-versions","text":"Older versions of the sedex container images had internal test character and are therefore not described in detail here. If you are interested in the version history of the sedex client and the corresponding changes, you can find these in the separate document Release Notes in the download area of www.sedex.ch .","title":"Previous Versions"},{"location":"client-container-v6/index.html","text":"sedex Client Docker Container (V6) This documentation describes how to install, configure and operate the current sedex Client version 6 on container platforms such as Docker, Kubernetes, OpenShift, etc. Before you start working with the sedex client container, it is important to take note of the following points. Notes Before Starting sedex is a Closed User Group sedex is a closed user group for registered and authorized participants of e-Government Switzerland. Only subscribers with regulatory authorization and the appropriate credentials can use sedex. Please contact sedexsupport@bfs.admin.ch if you are interested in subscribing to the sedex service. Container or classic installation? The sedex client can not only be operated as a container but can also be installed directly on numerous operating systems as a classic software installation. The installer and the corresponding installation and user manual can be found at www.sedex.ch . Container and Documentation are Pre-Release The official container image of the sedex Client and the accompanying documentation are currently still to be considered a pre-release and are in a public pilot phase. It is strongly discouraged to run a critical productive sedex Client based on this image without the necessary knowledge. Please Contact sedex support should you plan to use this container image or if you have any questions. Preparation required The smooth operation of a sedex client is a demanding task. Please read the documentation carefully and plan your installation before starting the sedex client as a container for the first time. Help us improve The sedex client as a container is a new offering. Help us to improve the container image but also the documentation. Therefore we are very interested in your feedback. Please tell us what you like at sedexsupport@bfs.admin.ch . Attention! Do not miss these important technical points! Before you start using sedex Client as a container, you need to be aware of the following important points! One running instance only per participant For a specific sedex participant (a specific sedex ID), a maximum of one sedex client may be running at any time. Otherwise, problems such as lost messages or other malfunctions may result. Therefore, you must absolutely ensure organizationally and operationally that no more than one sedex client is running for the same participant at any time. This point has to be considered especially on automatically orchestrated container platforms like Kubernetes, OpenShift, etc. Without specific configuration, these platforms tend to run multiple instances (for a short time) by default. Permanent file storage for data volume required Containers have, by principle, a disposable character. This means that any data stored in the container is also deleted with the container. However, sedex needs data that survive the (possibly short) life cycle of a container and must be persisted permanently. Examples for such important data to be stored are sedex messages, the participant certificate, etc. In order to guarantee that this data can be permanently stored outside the container, it is imperative that the container has a reliable external data volume to which it has access.","title":"Notes Before Starting"},{"location":"client-container-v6/index.html#sedex-client-docker-container-v6","text":"This documentation describes how to install, configure and operate the current sedex Client version 6 on container platforms such as Docker, Kubernetes, OpenShift, etc. Before you start working with the sedex client container, it is important to take note of the following points.","title":"sedex Client Docker Container (V6)"},{"location":"client-container-v6/index.html#notes-before-starting","text":"","title":"Notes Before Starting"},{"location":"client-container-v6/index.html#sedex-is-a-closed-user-group","text":"sedex is a closed user group for registered and authorized participants of e-Government Switzerland. Only subscribers with regulatory authorization and the appropriate credentials can use sedex. Please contact sedexsupport@bfs.admin.ch if you are interested in subscribing to the sedex service.","title":"sedex is a Closed User Group"},{"location":"client-container-v6/index.html#container-or-classic-installation","text":"The sedex client can not only be operated as a container but can also be installed directly on numerous operating systems as a classic software installation. The installer and the corresponding installation and user manual can be found at www.sedex.ch .","title":"Container or classic installation?"},{"location":"client-container-v6/index.html#container-and-documentation-are-pre-release","text":"The official container image of the sedex Client and the accompanying documentation are currently still to be considered a pre-release and are in a public pilot phase. It is strongly discouraged to run a critical productive sedex Client based on this image without the necessary knowledge. Please Contact sedex support should you plan to use this container image or if you have any questions.","title":"Container and Documentation are Pre-Release"},{"location":"client-container-v6/index.html#preparation-required","text":"The smooth operation of a sedex client is a demanding task. Please read the documentation carefully and plan your installation before starting the sedex client as a container for the first time.","title":"Preparation required"},{"location":"client-container-v6/index.html#help-us-improve","text":"The sedex client as a container is a new offering. Help us to improve the container image but also the documentation. Therefore we are very interested in your feedback. Please tell us what you like at sedexsupport@bfs.admin.ch .","title":"Help us improve"},{"location":"client-container-v6/index.html#attention-do-not-miss-these-important-technical-points","text":"Before you start using sedex Client as a container, you need to be aware of the following important points!","title":"Attention! Do not miss these important technical points!"},{"location":"client-container-v6/index.html#one-running-instance-only-per-participant","text":"For a specific sedex participant (a specific sedex ID), a maximum of one sedex client may be running at any time. Otherwise, problems such as lost messages or other malfunctions may result. Therefore, you must absolutely ensure organizationally and operationally that no more than one sedex client is running for the same participant at any time. This point has to be considered especially on automatically orchestrated container platforms like Kubernetes, OpenShift, etc. Without specific configuration, these platforms tend to run multiple instances (for a short time) by default.","title":"One running instance only per participant"},{"location":"client-container-v6/index.html#permanent-file-storage-for-data-volume-required","text":"Containers have, by principle, a disposable character. This means that any data stored in the container is also deleted with the container. However, sedex needs data that survive the (possibly short) life cycle of a container and must be persisted permanently. Examples for such important data to be stored are sedex messages, the participant certificate, etc. In order to guarantee that this data can be permanently stored outside the container, it is imperative that the container has a reliable external data volume to which it has access.","title":"Permanent file storage for data volume required"},{"location":"client-container-v6/backup-data.html","text":"Backup your Data xxx tbd xxx","title":"Backup your Data"},{"location":"client-container-v6/backup-data.html#backup-your-data","text":"xxx tbd xxx","title":"Backup your Data"},{"location":"client-container-v6/basic-concepts.html","text":"Overview and Basic Concepts On this page you get an overview of the sedex client as a Docker container and the basic concepts involved. Before you start using the sedex Client as a Docker container, it is important to understand these concepts. Overview of the sedex Client as a Docker Container With the official Docker image provided by sedex, you can run the current sedex Client as a container. All functionality provided by sedex can be used comfortably with all the advantages containers have to offer. The diagram below shows the main components of the sedex Client Docker container, which are described individually in the following. Permanent Data Storage (\"sedex-data\") Containers are disposable Containers have, by principle, a disposable character. This means that any data stored in the container is also deleted with the container. However, sedex needs data that survive the (possibly short) life cycle of a container and must be persisted permanently. For this purpose, an external permanent data storage must be connected to the sedex Client container. In the external permanent data storage (called \"sedex-data\"), the sedex Client container persists the following data in subfolders: conf/ Configuration data of the sedex Client. Including participant certificate and private key. Keep them safe and secure! interface/ File system interface for the business applications, contains among others the message inbox and message outbox. internal/ Technical data required by the sedex client. Only useful for the sedex client itself. logs/ Logfiles of the sedex client with events and errors mainly for your operation personnel. monitoring/ A simple text page with state information and metrics for your operations monitoring. Implementing Permanent Data Storage with Docker For the permanent data storage outside of the container, Docker offers the following two main options ( see Docker documentation for details): Volumes (storage managed by the container platform, possibly mounted over a network) Bind Mounts (a normal folder in the local file system on the host running the container) Whether volumes or bind mounts, ensure security and backups! Both volumes and bind mounts can be used with the sedex client. You can choose the variant that fits better into your operating environment. Either way, your operations staff must ensure that only authorized users and applications have access to their portion of the data and that backups of the data are made regularly. Notes on the Permanent Data Storage The command line examples for Docker in this documentation primarily show the use of bind mounts. Experienced container administrators can easily adapt the examples to volumes. In our examples the directory with the permanent data storage is named \"sedex-data\". Of course you can name this external bind mount directory or volume differently (for example, to indicate which sedex ID the data belongs to), but then you have to adapt the examples to your actual directory name. Other container platforms (Kubernetes, OpenShift, etc.) know specific concepts for persisted data volumes. Please refer to the corresponding documentation for your platform. Published Network Ports Network Port Mapping By default, when you create or run a container, it does not publish any of its internal network ports to the outside world. To make a port available to services outside of Docker, use the --publish option. This maps a container port via a free port on the Docker host to the outside world. The following diagram once again shows the components of the sedex client Docker container. This time, however, we see which processes of the sedex client are running inside the container and under which network ports they can be reached internally. When creating the sedex client Docker container, externally available network port numbers will have to be mapped to the internal ones. The examples in this documentation will show later how this network port mapping can be configured. The two phases of getting a sedex client Docker container up and running The following diagram shows how to get a sedex client up and running. The start-up basically runs through two phases: Phase 1: Initial Configuration In this phase, the external permanent data storage (\"sedex-data\") is created and initially configured. This phase is executed once. Phase 2: Run sedex Client In this stage, the sedex client is created, connected to the prepared permanent data storage and run for normal operation. This phase is repeated several times in practice, since containers have a disposable character and therefore can be thrown away and then recreated. For example, when upgrading the container to a newer version. The documentation covers both phases separately.","title":"Overview & Basic Concepts"},{"location":"client-container-v6/basic-concepts.html#overview-and-basic-concepts","text":"On this page you get an overview of the sedex client as a Docker container and the basic concepts involved. Before you start using the sedex Client as a Docker container, it is important to understand these concepts.","title":"Overview and Basic Concepts"},{"location":"client-container-v6/basic-concepts.html#overview-of-the-sedex-client-as-a-docker-container","text":"With the official Docker image provided by sedex, you can run the current sedex Client as a container. All functionality provided by sedex can be used comfortably with all the advantages containers have to offer. The diagram below shows the main components of the sedex Client Docker container, which are described individually in the following.","title":"Overview of the sedex Client as a Docker Container"},{"location":"client-container-v6/basic-concepts.html#permanent-data-storage-sedex-data","text":"Containers are disposable Containers have, by principle, a disposable character. This means that any data stored in the container is also deleted with the container. However, sedex needs data that survive the (possibly short) life cycle of a container and must be persisted permanently. For this purpose, an external permanent data storage must be connected to the sedex Client container. In the external permanent data storage (called \"sedex-data\"), the sedex Client container persists the following data in subfolders: conf/ Configuration data of the sedex Client. Including participant certificate and private key. Keep them safe and secure! interface/ File system interface for the business applications, contains among others the message inbox and message outbox. internal/ Technical data required by the sedex client. Only useful for the sedex client itself. logs/ Logfiles of the sedex client with events and errors mainly for your operation personnel. monitoring/ A simple text page with state information and metrics for your operations monitoring.","title":"Permanent Data Storage (\"sedex-data\")"},{"location":"client-container-v6/basic-concepts.html#published-network-ports","text":"Network Port Mapping By default, when you create or run a container, it does not publish any of its internal network ports to the outside world. To make a port available to services outside of Docker, use the --publish option. This maps a container port via a free port on the Docker host to the outside world. The following diagram once again shows the components of the sedex client Docker container. This time, however, we see which processes of the sedex client are running inside the container and under which network ports they can be reached internally. When creating the sedex client Docker container, externally available network port numbers will have to be mapped to the internal ones. The examples in this documentation will show later how this network port mapping can be configured.","title":"Published Network Ports"},{"location":"client-container-v6/basic-concepts.html#the-two-phases-of-getting-a-sedex-client-docker-container-up-and-running","text":"The following diagram shows how to get a sedex client up and running. The start-up basically runs through two phases: Phase 1: Initial Configuration In this phase, the external permanent data storage (\"sedex-data\") is created and initially configured. This phase is executed once. Phase 2: Run sedex Client In this stage, the sedex client is created, connected to the prepared permanent data storage and run for normal operation. This phase is repeated several times in practice, since containers have a disposable character and therefore can be thrown away and then recreated. For example, when upgrading the container to a newer version. The documentation covers both phases separately.","title":"The two phases of getting a sedex client Docker container up and running"},{"location":"client-container-v6/requirements.html","text":"Requirements Before you start using the sedex Client as a container, it is important to ensure that you meet the following requirements. sedex Participant Credentials You can only start up the sedex Client container for a sedex participant if you are in ownership of that participant's credentials . Two different sets of credentials are possible: 1. for a new participant: sedex ID Certificate Request ID (CRID) One Time Password 2. for an existing subscriber: sedex-ID Participant certificate (P12 file) Password to the P12 file Docker Version Docker Engine v17.06 or later. Memory / RAM 1GB memory / RAM for the sedex docker container. Tip On orchestration platforms (Kubernetes, OpenShift, etc.): If additional containers will be running along the sedex Client container (e.g. side car proxies of a service mesh), don't forget to add their memory requirement when allocating memory for the Pod. Persisted Data Folder / Persisted Data Volume A permanent file store outside the container, which is mapped into the container as a volume or bind mount. Warning The data in this storage is sensitive, critical and has to be fully protected. This file store must therefore be: persistent, protected from unauthorized access and integrated into a backup. Maximum of one instance at any time Due to the architecture of the sedex system, a maximum of one sedex Client may be running for a participant at any time. This must also be ensured when operating the sedex Client as a container. Warning This must also be ensured on container platforms while the orchestrator moves or updates the sedex Client container. This can be ensured on Kubernetes e.g. by using a StatefullSet or a Deployment with spec.strategy.type=Recreate .","title":"Requirements"},{"location":"client-container-v6/requirements.html#requirements","text":"Before you start using the sedex Client as a container, it is important to ensure that you meet the following requirements.","title":"Requirements"},{"location":"client-container-v6/requirements.html#sedex-participant-credentials","text":"You can only start up the sedex Client container for a sedex participant if you are in ownership of that participant's credentials . Two different sets of credentials are possible: 1. for a new participant: sedex ID Certificate Request ID (CRID) One Time Password 2. for an existing subscriber: sedex-ID Participant certificate (P12 file) Password to the P12 file","title":"sedex Participant Credentials"},{"location":"client-container-v6/requirements.html#docker-version","text":"Docker Engine v17.06 or later.","title":"Docker Version"},{"location":"client-container-v6/requirements.html#memory-ram","text":"1GB memory / RAM for the sedex docker container. Tip On orchestration platforms (Kubernetes, OpenShift, etc.): If additional containers will be running along the sedex Client container (e.g. side car proxies of a service mesh), don't forget to add their memory requirement when allocating memory for the Pod.","title":"Memory / RAM"},{"location":"client-container-v6/requirements.html#persisted-data-folder-persisted-data-volume","text":"A permanent file store outside the container, which is mapped into the container as a volume or bind mount. Warning The data in this storage is sensitive, critical and has to be fully protected. This file store must therefore be: persistent, protected from unauthorized access and integrated into a backup.","title":"Persisted Data Folder / Persisted Data Volume"},{"location":"client-container-v6/requirements.html#maximum-of-one-instance-at-any-time","text":"Due to the architecture of the sedex system, a maximum of one sedex Client may be running for a participant at any time. This must also be ensured when operating the sedex Client as a container. Warning This must also be ensured on container platforms while the orchestrator moves or updates the sedex Client container. This can be ensured on Kubernetes e.g. by using a StatefullSet or a Deployment with spec.strategy.type=Recreate .","title":"Maximum of one instance at any time"},{"location":"client-container-v6/_old_/index.html","text":"Basic Usage of sedex Client Docker Container V6 Warning This image is currently in EXPERIMENTAL status and for selected early adopters only (\"beta version only\"). It is strongly discouraged to run a productive sedex Client based on this image without the necessary knowledge. Please contact sedex support should you plan to use this image or have any questions. Important Notes Private application: sedex is a closed user group for registered and authorized participants only. If you are not such a registered participant, you cannot use sedex Client. One running instance only: It is absolutely necessary that you prevent two or more sedex Clients from running simultaneously for the same participant. In the worst case sedex messages could be lost. Therefore it has to be ensured that only one sedex Client is running at a time. This has to be considered especially when operating on automatic container orchestration platforms like Kubernetes. See section Kubernetes & Co. for further details. Persistent file storage for data volume required: There is important data that has to be stored permenently outside of the sedex Client Docker container. Examples for such data are messages, receipts, local messaging state database, certificates, passwords etc. If this data is not reliably stored outside the container, there is a risk of message loss and loss of access to the own message inbox. See section Permanent Data Storage (\"sedex-data\") for further details. Feedback: We are very interested in feedback on the Docker version of the sedex Client and this documentation. Please tell us what you like and what you don't like at sedexsupport@bfs.admin.ch. Current Docker Hub Tags Tag(s) Image Description Release date latest , 6.0.4, 6.0.4_container-0.99-beta The most current container image (version 0.99-beta) with sedex Client 6.0.4. Recommended. April 07, 2021 5.3.1, 5.3.1_container-0.94-beta The legacy container image (version 0.94-beta) with sedex Client 5.3.1. Legacy. December 19, 2019 Note: The special tag \" latest \" will always be an alias for the most current container of the most current sedex Client . The tags available can Requirements Docker Version: Docker Engine should be v17.06 or later. Older versions are not supported and the api syntax may differ from this manual. Memory: It is recommended to allocate at least 1GB memory for the sedex docker container. Introduction In order to successfully operate the sedex Client as a Docker container, you should first understand the following concepts. Permanent Data Storage (\"sedex-data\") The sedex Client must be able to store certain data permanently outside of the container. All the following sedex specific data must survive the lifespan of a Docker container: configuration sedex messages messaging state log files etc. For the permanent storage of data outside the container, Docker primarily offers the following two options ( see Docker documentation for details): Volumes (storage managed by Docker) Bind Mounts (local file system based storage on the host) Notes: The following command line examples only show the use of bind mounts . Experienced container administrators can easily adapt the examples to volumes . In our examples the directory with the permanent data storage is named \"sedex-data\". Of course you can name this directory differently, but then you have to adapt the examples to your actual directory name. Initial configuration parameters If you are starting from scratch, i.e. you have never started a sedex Client as a Docker container for this one participant, then the sedex container must initialize the permanent storage directory \"sedex-data\" once before the very first start so that it can work with it later. Specifically, the container will automatically create the required directory structure and create necessary configuration files in it.. Note In order to start this initialization process at its first start, the sedex Clients needs a few initial configuration parameters (e.g. the participant's sedexId) provided in the form of a plain text file named \"init.conf\". The content of the initial configuration file \"init.conf\" depends on the form of the credentials for the participant you have. You will find yourself in one of the following two initial cases: Case a) Initialize for an existing sedex participant: This means that a sedex Client has been running in another installation for this participant before. Thus a sedex participant-certificate and a corresponding password already exist and must be reused. Case b) Initialize for a new sedex participant: This means that there has no sedex Client been running for this participant before. Thus there is no participant-certificate yet but a so-called certificate request id (CRID) and a corresponding one time password (OTP) . The following installation instructions will distinguish between these two init cases a) and b). How to use this image I) Initial Configuration Warning The initial preparation steps only have to be executed just once before the very first start of the sedex Client . Step 1: Create a sedex-data directory Create a directory \"sedex-data\" on the local host or a network attached storage (NAS) where the sedex Client will store files that have to be persisted outside of the Docker container (ex. the sedex messaging interface directories). This directory will be used as a Docker bind mount. $ mkdir /path/to/sedex-data Step 2: Create a subdirectory conf for the configuration Create a subdirectory inside of \"sedex-data\" directory. This directory will contain all configuration files for this sedex participant. $ mkdir /path/to/sedex-data/conf Step 3a: Provide the initial configuration for an existing participant Note Execute this step only, if a sedex participant-certificate and a corresponding password already exist. For new participants skip to Step 3b. Provide the existing sedex certificate file (P12) Copy the sedex keystore file (PKCS12/P12 format, containing the private key and certificate) into the \"sedex-data/conf\" subdirectory. $ cp /path/to/credentials/YOUR-CERTIFICATE-FILE.p12 /path/to/sedex-data/conf/ Provide the file with the initial configuration parameters With a text editor (e.g. \"nano\") create a plain text file named \"init.conf\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/init.conf Add the following three configuration parameters (with values adjusted to your actual data) to your \"init.conf\" file and save it: SEDEX_ID=YOUR-SEDEX-ID SEDEX_CERTIFICATE_FILENAME=YOUR-CERTIFICATE-FILE.p12 SEDEX_CERTIFICATE_PASSWORD=YOUR-PASSWORD Note: After the first successful start of the sedex Client, the file init.conf will be deleted automatically as its content will be moved to the created sedex configuration files. Note: If an HTTP proxy is required for access to the Internet, such a proxy server can optionally already be defined in the init.conf file (see section Advanced Docker Options ) or later manually be defined in the central configuration file of the sedex Client (see section Advanced sedex Client Configuration ). Step 3b: Provide the initial configuration for a new participant Note Execute this step only for new sedex participant with no existing certificate but instead with a certificate request id (CRID) and a one time password (OTP) . For new participants follow Step 3a. Provide the file with the initial configuration parameters With a text editor (e.g. \"nano\") create a plain text file named \"init.conf\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/init.conf Add the following three configuration parameters (with values adjusted to your actual data) to your \"init.conf\" file and save it: SEDEX_ID=YOUR-SEDEX-ID SEDEX_CRID=YOUR_CERTIFICATE_REQUEST_ID SEDEX_OTP=YOUR-ONE-TIME-PASSWORD Note: After the first successful start of the sedex Client, the file init.conf will be deleted automatically as its content will be moved to the created sedex configuration files. Note: If an HTTP proxy is required for access to the Internet, such a proxy server can optionally already be defined in the init.conf file (see section Advanced Docker Options ) or later manually be defined in the central configuration file of the sedex Client (see section Advanced sedex Client Configuration ). II) Starting and using the sedex Client The following steps show how to create and start the latest Docker container running the sedex Client. Note: If you want to use a specific version of the container then see Advanced Docker Options for details. Run the sedex Client container Run the sedex Client container using environment-specific values for the following options: /path/to/sedex-data - The path to the host's \"sedex-data\" directory (holding the persisted data) YOUR_MONITORING_PORT - The port at which the monitoring web page of the sedex Client should be accessible from the outside of the container YOUR_WS_PROXY_HTTP_PORT - The unsecured http port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used or will only be used via https. YOUR_WS_PROXY_HTTPS_PORT - The secured https port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used. --stop-timeout 65 - When the docker container is stopped (e.g. with \"docker stop\" command), the sedex Client's controller-stop.sh is executed to initiate a graceful shutdown of the client. This typically takes longer than the default 10 seconds that the Docker daemon waits before killing the container. The --stop-timeout option overrides the default. The required time will vary from one installation to another. --restart unless-stopped - Restart Policy: Restart the container automatically after Docker daemon restarts, unless the container has been stopped intentionally. -d - Detached: Start container in background without showing log output on console. To run the sedex Client container enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest Note: After the very first start of the sedex Client Docker container, a general default configuration is created. If specific configuration options are required, these can be set in the central configuration file of the sedex Client. With a text editor (e.g. \"nano\") open the central sedex Client configuration file named \"sedex Client-configuration.properties\" in the subdirectory \"sedex-data/conf\" and edit the contained configuration parameters as needed and as described in Advanced sedex Client Configuration : $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties If no such configuration file has been created after the very first start of the sedex Client, you can search for the cause in the Docker log file: $ docker logs sedex Client Stop and start the sedex Client container Stop the sedex Client container: $ docker stop sedex Client Start the sedex Client container: $ docker start sedex Client Accessing log files of the sedex Client container Option 1: Via docker logs The combined sedex Client logs can be accessed via the standard docker mechanism. $ docker logs sedex Client --follow 14:21:27 INFO Adapterlog - 14:21:27 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:21:57 INFO Adapterlog - 14:21:57 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:21:57 INFO Adapterlog - 14:21:57 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:22:27 INFO Adapterlog - 14:22:27 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:22:27 INFO Adapterlog - 14:22:27 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:22:57 INFO Adapterlog - 14:22:57 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:22:57 INFO Adapterlog - 14:22:57 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. [...] Option 2: Via sedex-data's logs subdirectory The standard sedex Client log files are located in sedex-data's logs subdirectory. $ cd /path/to/sedex-data/logs $ ls adapter controller wsproxy error-log.csv receive-log.csv send-log.csv wsproxy-access-log.csv Monitoring the sedex Client container It is essential to integrate sedex Client's functionality in your own operations monitoring system. The key/value pairs provided by the sedex Client for this purpose can be accessed via file system or via http. The basic status of the container can also be checked via docker health. Option 1: Via sedex-data's monitoring subdirectory (file system) The sedex Client monitoring file is a plain text file and is located in sedex-data's monitoring subdirectory. $ cd /path/to/sedex-data/monitoring Option 2: Via the monitoring Web page (http) The sedex Client monitoring webpage is a plain text page and is accessible via the mapped port (default 8000). $ curl http://IP-DOCKER-HOST:8000/monitoring Option 3: Via docker health Use the standard docker diagnostics to check the global status and health of a container. Note: Nevertheless it is recommended to check the most important key/value pairs on the monitoring page of the sedex Client.","title":"Basic Usage of sedex Client Docker Container V6"},{"location":"client-container-v6/_old_/index.html#basic-usage-of-sedex-client-docker-container-v6","text":"Warning This image is currently in EXPERIMENTAL status and for selected early adopters only (\"beta version only\"). It is strongly discouraged to run a productive sedex Client based on this image without the necessary knowledge. Please contact sedex support should you plan to use this image or have any questions.","title":"Basic Usage of sedex Client Docker Container V6"},{"location":"client-container-v6/_old_/index.html#important-notes","text":"Private application: sedex is a closed user group for registered and authorized participants only. If you are not such a registered participant, you cannot use sedex Client. One running instance only: It is absolutely necessary that you prevent two or more sedex Clients from running simultaneously for the same participant. In the worst case sedex messages could be lost. Therefore it has to be ensured that only one sedex Client is running at a time. This has to be considered especially when operating on automatic container orchestration platforms like Kubernetes. See section Kubernetes & Co. for further details. Persistent file storage for data volume required: There is important data that has to be stored permenently outside of the sedex Client Docker container. Examples for such data are messages, receipts, local messaging state database, certificates, passwords etc. If this data is not reliably stored outside the container, there is a risk of message loss and loss of access to the own message inbox. See section Permanent Data Storage (\"sedex-data\") for further details. Feedback: We are very interested in feedback on the Docker version of the sedex Client and this documentation. Please tell us what you like and what you don't like at sedexsupport@bfs.admin.ch.","title":"Important Notes"},{"location":"client-container-v6/_old_/index.html#current-docker-hub-tags","text":"Tag(s) Image Description Release date latest , 6.0.4, 6.0.4_container-0.99-beta The most current container image (version 0.99-beta) with sedex Client 6.0.4. Recommended. April 07, 2021 5.3.1, 5.3.1_container-0.94-beta The legacy container image (version 0.94-beta) with sedex Client 5.3.1. Legacy. December 19, 2019 Note: The special tag \" latest \" will always be an alias for the most current container of the most current sedex Client . The tags available can","title":"Current Docker Hub Tags"},{"location":"client-container-v6/_old_/index.html#requirements","text":"Docker Version: Docker Engine should be v17.06 or later. Older versions are not supported and the api syntax may differ from this manual. Memory: It is recommended to allocate at least 1GB memory for the sedex docker container.","title":"Requirements"},{"location":"client-container-v6/_old_/index.html#introduction","text":"In order to successfully operate the sedex Client as a Docker container, you should first understand the following concepts.","title":"Introduction"},{"location":"client-container-v6/_old_/index.html#permanent-data-storage-sedex-data","text":"The sedex Client must be able to store certain data permanently outside of the container. All the following sedex specific data must survive the lifespan of a Docker container: configuration sedex messages messaging state log files etc. For the permanent storage of data outside the container, Docker primarily offers the following two options ( see Docker documentation for details): Volumes (storage managed by Docker) Bind Mounts (local file system based storage on the host) Notes: The following command line examples only show the use of bind mounts . Experienced container administrators can easily adapt the examples to volumes . In our examples the directory with the permanent data storage is named \"sedex-data\". Of course you can name this directory differently, but then you have to adapt the examples to your actual directory name.","title":"Permanent Data Storage (\"sedex-data\")"},{"location":"client-container-v6/_old_/index.html#initial-configuration-parameters","text":"If you are starting from scratch, i.e. you have never started a sedex Client as a Docker container for this one participant, then the sedex container must initialize the permanent storage directory \"sedex-data\" once before the very first start so that it can work with it later. Specifically, the container will automatically create the required directory structure and create necessary configuration files in it.. Note In order to start this initialization process at its first start, the sedex Clients needs a few initial configuration parameters (e.g. the participant's sedexId) provided in the form of a plain text file named \"init.conf\". The content of the initial configuration file \"init.conf\" depends on the form of the credentials for the participant you have. You will find yourself in one of the following two initial cases: Case a) Initialize for an existing sedex participant: This means that a sedex Client has been running in another installation for this participant before. Thus a sedex participant-certificate and a corresponding password already exist and must be reused. Case b) Initialize for a new sedex participant: This means that there has no sedex Client been running for this participant before. Thus there is no participant-certificate yet but a so-called certificate request id (CRID) and a corresponding one time password (OTP) . The following installation instructions will distinguish between these two init cases a) and b).","title":"Initial configuration parameters"},{"location":"client-container-v6/_old_/index.html#how-to-use-this-image","text":"","title":"How to use this image"},{"location":"client-container-v6/_old_/index.html#i-initial-configuration","text":"Warning The initial preparation steps only have to be executed just once before the very first start of the sedex Client .","title":"I) Initial Configuration"},{"location":"client-container-v6/_old_/index.html#ii-starting-and-using-the-sedex-client","text":"The following steps show how to create and start the latest Docker container running the sedex Client. Note: If you want to use a specific version of the container then see Advanced Docker Options for details.","title":"II) Starting and using the sedex Client"},{"location":"client-container-v6/_old_/advanced-docker-options.html","text":"Advanced Docker Options This page describes advanced aspects of Docker Container configuration. Most of these options are rarely needed. Defining an outgoing HTTP-proxy in the init.conf If an HTTP proxy is required to access the Internet, such a proxy server can optionally already be entered at the very beginning during the initial configuration phase in the file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... OUTGOING_WEB_PROXY_HOST=proxy.example.ch OUTGOING_WEB_PROXY_PORT=8080 OUTGOING_WEB_PROXY_USER=example-user OUTGOING_WEB_PROXY_PASSWORD=1234 Note: If no user name is required, the two optional parameters OUTGOING_WEB_PROXY_USER and OUTGOING_WEB_PROXY_PASSWORD can be omitted. Note: An http proxy can also be configured directly in the central client configuration file at any time (see Advanced sedex Client Configuration ). Disabling the Web Service Proxy in the init.conf If the functionality of the sedex web service proxy for secure access to defined web services is not used, it can already be deactivated at the very beginning during the initial configuration phase in the initial configuration file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... WSPROXY_START=false Note: If this parameter is missing in init.conf a default value of \"true\" will be set in the configuration file. Note: If the usage of the web service proxy should be required later, it can be activated in the central client configuration file at any time (see Advanced sedex Client Configuration ). Timezone The default timezone in the sedex Client Docker container is \"Europe/Zurich\" (i.e. local Swiss time). If you have to set another timezone (e.g. UTC) then set the environment variable TZ by adding the following option to your container run statement: --env TZ=UTC Running the sedex Client as a non-root user Non-root container images add an extra layer of security and are generally recommended for production environments. The following steps describe how to set up a non-root group and user in case the host environment does not already provide these. Step 1: Create a non-root group on the host machine Determine a group ID (501 in the this example) that is unique on the host machine and create the group (the name does not have to be \"sedex-group\"). $ groupadd --gid 501 sedex-group Step 2: Create a non-root user on the host machine Determine a user ID (901 in the this example) that is unique on the host machine and create the user (the name does not have to be \"sedex-user\"), assign it to the group created in the previous step, and specifying its home directory. $ useradd --uid 901 --no-log-init --gid sedex-group --create-home --home-dir /opt/sedexclient/ sedex-user Step 3: Set the group and owner of the sedex-data directories If the sedex Client will run as a non-root user inside of the Docker container, set the group and owner of the whole sedex-data directory tree and its contents so that the non-root user can access them. $ chown --recursive sedex-user:sedex-group /path/to/sedex-data Step 4: Run the sedex Client container as a non-root user Run the sedex Client container using environment-specific values for the following options: /path/to/sedex-data - The path to the host's \"sedex-data\" directory (holding the persisted data) YOUR_MONITORING_PORT - The port at which the monitoring web page of the sedex Client should be accessible from the outside of the container YOUR_WS_PROXY_HTTP_PORT - The unsecured http port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used or will only be used via https. YOUR_WS_PROXY_HTTPS_PORT - The secured https port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used. --stop-timeout 65 - When the docker container is stopped (e.g. with \"docker stop\" command), the sedex Client's controller-stop.sh is executed to initiate a graceful shutdown of the client. This typically takes longer than the default 10 seconds that the Docker daemon waits before killing the container. The --stop-timeout option overrides the default. The required time will vary from one installation to another. --restart unless-stopped - Restart Policy: Restart the container automatically after Docker daemon restarts, unless the container has been stopped intentionally. --user - User: Sets the UID and GID used to start the sedex Client. -d - Detached: Start container in background without showing log output on console. To run the sedex Client container as a non root user enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ --user 901:501 \\ -d \\ sedexch/sedex-client:latest Running the Container in Read-Only mode The sedex Client Docker container can be started with a read-only root filesystem, which further increases the security of the container. To run the sedex Client container with its root filesystem mounted as read-only enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ --read-only \\ -d \\ sedexch/sedex-client:latest The Docker option --read-only mounts the container\u2019s root filesystem as read only prohibiting writes to locations other than the specified volumes for the container. Running a specific version of the container If your are referencing the container by its name \"sedexch/sedex-client\" the version with the tag \"latest\" is automatically selected. To use a specific sedex Client version and/or or a specific container version, use a versioned tag explicitly. View the list of available versions in the Docker hub registry. Note: For simplicity the run parameters are ommited in the following examples. These parameters have to be set as described in the run example above. Example: Run the latest Docker container of the latest sedex Client: $ docker run sedexch/sedex-client or $ docker run sedexch/sedex-client:latest Example: Run the latest Docker container of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0 Example: Run the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0_container-0.95-beta Pulling a specific image version The \"docker run\" command does not automatically download a newer image from docker hub, if an older image with that name and tag is available locally. In this case you have to manually issue a \"docker pull\" command, to download the newest images from docher hub. Example: Get the latest Docker container of the latest sedex Client: $ docker pull sedexch/sedex-client Example: Get the latest Docker container of the sedex Client 5.3.1: $ docker pull sedexch/sedex-client:6.0.0 Example: Get the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker pull sedexch/sedex-client:6.0.0_container-0.95-beta Separate permanent stores for conf, log, etc. For the permanent store of data outside the container, most users will be happy to use one single directory \"sedex-data\" that holds all the different data types in one place: configuration sedex messages messaging state log files etc. There are good reasons to separate these stores, e.g. different users and permissions. So you can mount the different subdirectories seperately: $ mkdir /path/to/sedex-conf $ mkdir /path/to/sedex-interface $ mkdir /path/to/sedex-internal $ mkdir /path/to/sedex-logs $ mkdir /path/to/sedex-monitoring $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-conf,destination=/sedex-data/conf/ \\ --mount type=bind,source=/path/to/sedex-interface,destination=/sedex-data/interface/ \\ --mount type=bind,source=/path/to/sedex-internal,destination=/sedex-data/internal/ \\ --mount type=bind,source=/path/to/sedex-logs,destination=/sedex-data/logs/ \\ --mount type=bind,source=/path/to/sedex-monitoring,destination=/sedex-data/monitoring/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest","title":"Advanced Docker Options"},{"location":"client-container-v6/_old_/advanced-docker-options.html#advanced-docker-options","text":"This page describes advanced aspects of Docker Container configuration. Most of these options are rarely needed.","title":"Advanced Docker Options"},{"location":"client-container-v6/_old_/advanced-docker-options.html#defining-an-outgoing-http-proxy-in-the-initconf","text":"If an HTTP proxy is required to access the Internet, such a proxy server can optionally already be entered at the very beginning during the initial configuration phase in the file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... OUTGOING_WEB_PROXY_HOST=proxy.example.ch OUTGOING_WEB_PROXY_PORT=8080 OUTGOING_WEB_PROXY_USER=example-user OUTGOING_WEB_PROXY_PASSWORD=1234 Note: If no user name is required, the two optional parameters OUTGOING_WEB_PROXY_USER and OUTGOING_WEB_PROXY_PASSWORD can be omitted. Note: An http proxy can also be configured directly in the central client configuration file at any time (see Advanced sedex Client Configuration ).","title":"Defining an outgoing HTTP-proxy in the init.conf"},{"location":"client-container-v6/_old_/advanced-docker-options.html#disabling-the-web-service-proxy-in-the-initconf","text":"If the functionality of the sedex web service proxy for secure access to defined web services is not used, it can already be deactivated at the very beginning during the initial configuration phase in the initial configuration file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... WSPROXY_START=false Note: If this parameter is missing in init.conf a default value of \"true\" will be set in the configuration file. Note: If the usage of the web service proxy should be required later, it can be activated in the central client configuration file at any time (see Advanced sedex Client Configuration ).","title":"Disabling the Web Service Proxy in the init.conf"},{"location":"client-container-v6/_old_/advanced-docker-options.html#timezone","text":"The default timezone in the sedex Client Docker container is \"Europe/Zurich\" (i.e. local Swiss time). If you have to set another timezone (e.g. UTC) then set the environment variable TZ by adding the following option to your container run statement: --env TZ=UTC","title":"Timezone"},{"location":"client-container-v6/_old_/advanced-docker-options.html#running-the-sedex-client-as-a-non-root-user","text":"Non-root container images add an extra layer of security and are generally recommended for production environments. The following steps describe how to set up a non-root group and user in case the host environment does not already provide these.","title":"Running the sedex Client as a non-root user"},{"location":"client-container-v6/_old_/advanced-docker-options.html#running-the-container-in-read-only-mode","text":"The sedex Client Docker container can be started with a read-only root filesystem, which further increases the security of the container. To run the sedex Client container with its root filesystem mounted as read-only enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ --read-only \\ -d \\ sedexch/sedex-client:latest The Docker option --read-only mounts the container\u2019s root filesystem as read only prohibiting writes to locations other than the specified volumes for the container.","title":"Running the Container in Read-Only mode"},{"location":"client-container-v6/_old_/advanced-docker-options.html#running-a-specific-version-of-the-container","text":"If your are referencing the container by its name \"sedexch/sedex-client\" the version with the tag \"latest\" is automatically selected. To use a specific sedex Client version and/or or a specific container version, use a versioned tag explicitly. View the list of available versions in the Docker hub registry. Note: For simplicity the run parameters are ommited in the following examples. These parameters have to be set as described in the run example above. Example: Run the latest Docker container of the latest sedex Client: $ docker run sedexch/sedex-client or $ docker run sedexch/sedex-client:latest Example: Run the latest Docker container of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0 Example: Run the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0_container-0.95-beta","title":"Running a specific version of the container"},{"location":"client-container-v6/_old_/advanced-docker-options.html#pulling-a-specific-image-version","text":"The \"docker run\" command does not automatically download a newer image from docker hub, if an older image with that name and tag is available locally. In this case you have to manually issue a \"docker pull\" command, to download the newest images from docher hub. Example: Get the latest Docker container of the latest sedex Client: $ docker pull sedexch/sedex-client Example: Get the latest Docker container of the sedex Client 5.3.1: $ docker pull sedexch/sedex-client:6.0.0 Example: Get the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker pull sedexch/sedex-client:6.0.0_container-0.95-beta","title":"Pulling a specific image version"},{"location":"client-container-v6/_old_/advanced-docker-options.html#separate-permanent-stores-for-conf-log-etc","text":"For the permanent store of data outside the container, most users will be happy to use one single directory \"sedex-data\" that holds all the different data types in one place: configuration sedex messages messaging state log files etc. There are good reasons to separate these stores, e.g. different users and permissions. So you can mount the different subdirectories seperately: $ mkdir /path/to/sedex-conf $ mkdir /path/to/sedex-interface $ mkdir /path/to/sedex-internal $ mkdir /path/to/sedex-logs $ mkdir /path/to/sedex-monitoring $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-conf,destination=/sedex-data/conf/ \\ --mount type=bind,source=/path/to/sedex-interface,destination=/sedex-data/interface/ \\ --mount type=bind,source=/path/to/sedex-internal,destination=/sedex-data/internal/ \\ --mount type=bind,source=/path/to/sedex-logs,destination=/sedex-data/logs/ \\ --mount type=bind,source=/path/to/sedex-monitoring,destination=/sedex-data/monitoring/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest","title":"Separate permanent stores for conf, log, etc."},{"location":"client-container-v6/_old_/orchestration.html","text":"Kubernetes & Co. The sedex Client Docker container can be run on a Kubernetes-based orchestration platform. The following points must be taken into account. Memory Allocation It is recommended to allocate at least 1GB memory for the sedex docker container. If additional containers will run within a Kubernetes Pod (e.g. side car proxies of a service mesh), their memory requirements must be added and more memory must be allocated to the Pod accordingly. Initial configuration with Init Containers instead of init.conf file Container orchestration platforms such as Kubernetes know the concept of so-called Init Containers . These utility containers are started before the actual container is started, with the task of performing initialization tasks. If the initial configuration described above (with manually creating an init.conf file) is not a feasible way, one of the two provided init containers from sedex may be able to help. There is a separate init container for each of the two initialization cases a) and b) described in the Basic Usage . The task of the init containers is to create the init.conf file from passed ENV parameters. a) Init Container for an existing participant If you already have a participant with an existing sedex participant certificate (a P12 file). Run the sedex Client container using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id KEYSTORE - environment variable holding the content of the keystore file (P12) in base64 encoded format KEYSTORE_PW - environment variable holding the password to the keystore file OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env KEYSTORE=CONTENT-OF-YOUR-CERTIFICATE-FILE \\ --env KEYSTORE_PW=YOUR-PASSWORD \\ sedexch/sedex-client init-container-existing-cert.sh Note: In a Linux console, the contents of the keystore file (P12) can be translated into the required base64 encoded format as follows: $ cat YOUR-CERTIFICATE-FILE.p12 | base64 Resulting output: MIIHdgIBAzCCBzwGCSqGSIb3DQEHAaCCBy0EggcpMIIHJTCCA+8GCSqGSIb3DQEHBqCCA+AwggPc AgEAMIID1QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIRYqcETINPCICAggAgIIDqJno8zFy [...] cDZCr7zStk1IBaD7WoHQqRmvlM9qJJrZsELaTflLcfo43GWGDiwX+OqTD0xo3J/EmVJ8fat/yKsM 4lnSpDFaMCMGCSqGSIb3DQEJFTEWBBTPLjUs7MQ16yQIA6BqTg4C6uxj9jAzBgkqhkiG9w0BCRQx Jh4kAEMAbABpAGUAbgB0ACAAQwBlAHIAdABpAGYAaQBjAGEAdABlMDEwITAJBgUrDgMCGgUABBSF i3kuzz/2qGFiSHGVmHe+aHbm2wQIs0UZdpNO54oCAggA Note: Since this content contains the private key of the sedex participant, it must be kept secret. This content and the corresponding password must not be visible to unauthorized persons at any time. b) initial configuration for a new participant If you don't have an existing certificate but a certificate request ID (CRID) and a one time password (OTP). Run the sedex Client container using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id CRID - environment variable holding the certificate request id (CRID) OTP - environment variable holding the one time password (OTP) OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env CRID=YOUR_CERTIFICATE_REQUEST_ID \\ --env OTP=YOUR-ONE-TIME-PASSWORD \\ sedexch/sedex-client init-container-new-cert.sh Ensure a maximum of one client instance Due to the architecture of the sedex system, a maximum of one sedex Client may be running for a participant at any time . This must also be ensured when operating the sedex Client as a container. On an orchestration platform for each container can be defined how many instances should run. E.g. Kubernetes calls this the number of \"replicas\" . An orchestration platform can move containers to another node at any time. Usually this is done by starting a container on the new node before the old one is deactivated. This strategy may make sense for most web applications. However, when applied to the sedex Client, this would result in two sedex Clients running for a certain period of time. This can be prevented by setting the strategy to be used. Kubernetes calls the strategy to be chosen for sedex \"Recreate\". The following is an excerpt from a Kubernetes deployment for the sedex Client: apiVersion: apps/v1 kind: Deployment metadata: name: sedex Client-deployment labels: app: sedexch/sedex-client/1-123455-1 spec: replicas: 1 strategy: type: Recreate selector: matchLabels: app: sedexch/sedex-client/1-123455-1 template: metadata: labels: app: sedexch/sedex-client/1-123455-1 spec: containers: - name: sedexch/sedex-client image: sedexch/sedex-client:6.0.0 [...]","title":"Kubernetes & Co."},{"location":"client-container-v6/_old_/orchestration.html#kubernetes-co","text":"The sedex Client Docker container can be run on a Kubernetes-based orchestration platform. The following points must be taken into account.","title":"Kubernetes &amp; Co."},{"location":"client-container-v6/_old_/orchestration.html#memory-allocation","text":"It is recommended to allocate at least 1GB memory for the sedex docker container. If additional containers will run within a Kubernetes Pod (e.g. side car proxies of a service mesh), their memory requirements must be added and more memory must be allocated to the Pod accordingly.","title":"Memory Allocation"},{"location":"client-container-v6/_old_/orchestration.html#initial-configuration-with-init-containers-instead-of-initconf-file","text":"Container orchestration platforms such as Kubernetes know the concept of so-called Init Containers . These utility containers are started before the actual container is started, with the task of performing initialization tasks. If the initial configuration described above (with manually creating an init.conf file) is not a feasible way, one of the two provided init containers from sedex may be able to help. There is a separate init container for each of the two initialization cases a) and b) described in the Basic Usage . The task of the init containers is to create the init.conf file from passed ENV parameters.","title":"Initial configuration with Init Containers instead of init.conf file"},{"location":"client-container-v6/_old_/orchestration.html#a-init-container-for-an-existing-participant","text":"If you already have a participant with an existing sedex participant certificate (a P12 file). Run the sedex Client container using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id KEYSTORE - environment variable holding the content of the keystore file (P12) in base64 encoded format KEYSTORE_PW - environment variable holding the password to the keystore file OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env KEYSTORE=CONTENT-OF-YOUR-CERTIFICATE-FILE \\ --env KEYSTORE_PW=YOUR-PASSWORD \\ sedexch/sedex-client init-container-existing-cert.sh Note: In a Linux console, the contents of the keystore file (P12) can be translated into the required base64 encoded format as follows: $ cat YOUR-CERTIFICATE-FILE.p12 | base64 Resulting output: MIIHdgIBAzCCBzwGCSqGSIb3DQEHAaCCBy0EggcpMIIHJTCCA+8GCSqGSIb3DQEHBqCCA+AwggPc AgEAMIID1QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIRYqcETINPCICAggAgIIDqJno8zFy [...] cDZCr7zStk1IBaD7WoHQqRmvlM9qJJrZsELaTflLcfo43GWGDiwX+OqTD0xo3J/EmVJ8fat/yKsM 4lnSpDFaMCMGCSqGSIb3DQEJFTEWBBTPLjUs7MQ16yQIA6BqTg4C6uxj9jAzBgkqhkiG9w0BCRQx Jh4kAEMAbABpAGUAbgB0ACAAQwBlAHIAdABpAGYAaQBjAGEAdABlMDEwITAJBgUrDgMCGgUABBSF i3kuzz/2qGFiSHGVmHe+aHbm2wQIs0UZdpNO54oCAggA Note: Since this content contains the private key of the sedex participant, it must be kept secret. This content and the corresponding password must not be visible to unauthorized persons at any time.","title":"a) Init Container for an existing participant"},{"location":"client-container-v6/_old_/orchestration.html#b-initial-configuration-for-a-new-participant","text":"If you don't have an existing certificate but a certificate request ID (CRID) and a one time password (OTP). Run the sedex Client container using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id CRID - environment variable holding the certificate request id (CRID) OTP - environment variable holding the one time password (OTP) OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env CRID=YOUR_CERTIFICATE_REQUEST_ID \\ --env OTP=YOUR-ONE-TIME-PASSWORD \\ sedexch/sedex-client init-container-new-cert.sh","title":"b) initial configuration for a new participant"},{"location":"client-container-v6/_old_/orchestration.html#ensure-a-maximum-of-one-client-instance","text":"Due to the architecture of the sedex system, a maximum of one sedex Client may be running for a participant at any time . This must also be ensured when operating the sedex Client as a container. On an orchestration platform for each container can be defined how many instances should run. E.g. Kubernetes calls this the number of \"replicas\" . An orchestration platform can move containers to another node at any time. Usually this is done by starting a container on the new node before the old one is deactivated. This strategy may make sense for most web applications. However, when applied to the sedex Client, this would result in two sedex Clients running for a certain period of time. This can be prevented by setting the strategy to be used. Kubernetes calls the strategy to be chosen for sedex \"Recreate\". The following is an excerpt from a Kubernetes deployment for the sedex Client: apiVersion: apps/v1 kind: Deployment metadata: name: sedex Client-deployment labels: app: sedexch/sedex-client/1-123455-1 spec: replicas: 1 strategy: type: Recreate selector: matchLabels: app: sedexch/sedex-client/1-123455-1 template: metadata: labels: app: sedexch/sedex-client/1-123455-1 spec: containers: - name: sedexch/sedex-client image: sedexch/sedex-client:6.0.0 [...]","title":"Ensure a maximum of one client instance"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html","text":"Custom sedex Client Configuration Options This page describes advanced aspects of Docker Container configuration. Most of these options are rarely needed. How to activate changes made to the sedex Client Configuration Important: Configuration changes to the sedex Client become only active after a restart of the container. So restart the container to activate any changes made to the central configuration file \"sedex Client-configuration.properties\". Internet access via HTTP-Proxy If an HTTP proxy is required to access the Internet, such a proxy server can be entered in the central sedex Client configuration file. Example: File: /path/to/sedex-data/conf/sedex Client-configuration.properties ... # Proxy settings: Set these values only if you reach the Internet in your network only through a proxy # Example: host=proxy.example.ch port=8080 user=example-user password=1234 outgoing-web-proxy.host=proxy.example.ch outgoing-web-proxy.port=8080 outgoing-web-proxy.user=example-user outgoing-web-proxy.password=1234 ... Note: Leave the user/password parameters blank if proxy server authentication is not required. Restart container to activate changes. Disable WebSocket protocol By default, the sedex Client uses the WebSocket protocol to reduce round trip times by actively notifying the client using events sent from the server to the client. In extremely rare cases (approx. 1% of all clients), the WebSocket protocol can cause communication problems with network components on the client side. If such a problem is detected, the use of WebSocket can manually be deactivated. As a result, the client can only use the so-called polling mode, which leads to longer message round trip times (about 10 minutes instead of a few seconds), but the sedex Client can still offer the basic functionality without websocket if required. Note: Normally the web socket communication should not be disabled. With a text editor (e.g. \"nano\") open the central sedex Client configuration file named \"sedex Client-configuration.properties\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Add the following configuration parameter to the configuration file and save it: websocket.enabled=false Note: Restart container to activate changes Disable sedex Webservice Proxy By default, the sedex Client is starting the sedex Webservice Proxy functionality. If not used, the sedex Webservice Proxy can be disabled in order to save some resources (CPU, memory). With a text editor (e.g. \"nano\") open the central sedex Client configuration file named \"sedex Client-configuration.properties\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Set the following configuration parameter in the configuration file to false and save it: wsproxy.start=false Note: Restart container to activate changes Custom sedex Webservice Proxy endpoints Normally the definitions of the web services offered by the sedex Web Service Proxy are automatically provisioned and require no manual configuration. But if you are developing or testing a new web service that should be offered via sedex Web Service Proxy, it may be necessary to manually configure test instances of services. For this purpose the backend endpoint of a web service proxy can be overridden locally in the central sedex Client configuration file: $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Adding the following line overrides the endpoint for the Web service with name my-service (adapt name to your service): wsproxy.services.my-service.target-url=https://www.example.com/path e.g. override the endpoint of the web service UPIQueryService: wsproxy.services.UPIQueryService.target-url=https://wupi-test.zas.admin.ch/wupi_cc/UPIQueryService If no entry is made for a particular service, the default endpoint defined by sedex is used. Note: If the custom endpoint of a Web service requires a custom SSL/TLS-certificate not contained in the standard sedex truststore, you can override the default truststore as follows. Copy your custom SSL/TLS-certificate (e.g. upiquery-test.cer) into the local certificate folder of your sedex Client: $ cp /path/to/yourTLSCert.cer /path/to/sedex-data/conf/certificates/upiquery-test.cer Add the following configuration line to the central sedex Client configuration file referencing your certificate file: wsproxy.services.UPIQueryService.target-tls-certificate-filename=upiquery-test.cer","title":"Custom sedex Client Configuration Options"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html#custom-sedex-client-configuration-options","text":"This page describes advanced aspects of Docker Container configuration. Most of these options are rarely needed.","title":"Custom sedex Client Configuration Options"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html#how-to-activate-changes-made-to-the-sedex-client-configuration","text":"Important: Configuration changes to the sedex Client become only active after a restart of the container. So restart the container to activate any changes made to the central configuration file \"sedex Client-configuration.properties\".","title":"How to activate changes made to the sedex Client Configuration"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html#internet-access-via-http-proxy","text":"If an HTTP proxy is required to access the Internet, such a proxy server can be entered in the central sedex Client configuration file. Example: File: /path/to/sedex-data/conf/sedex Client-configuration.properties ... # Proxy settings: Set these values only if you reach the Internet in your network only through a proxy # Example: host=proxy.example.ch port=8080 user=example-user password=1234 outgoing-web-proxy.host=proxy.example.ch outgoing-web-proxy.port=8080 outgoing-web-proxy.user=example-user outgoing-web-proxy.password=1234 ... Note: Leave the user/password parameters blank if proxy server authentication is not required. Restart container to activate changes.","title":"Internet access via HTTP-Proxy"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html#disable-websocket-protocol","text":"By default, the sedex Client uses the WebSocket protocol to reduce round trip times by actively notifying the client using events sent from the server to the client. In extremely rare cases (approx. 1% of all clients), the WebSocket protocol can cause communication problems with network components on the client side. If such a problem is detected, the use of WebSocket can manually be deactivated. As a result, the client can only use the so-called polling mode, which leads to longer message round trip times (about 10 minutes instead of a few seconds), but the sedex Client can still offer the basic functionality without websocket if required. Note: Normally the web socket communication should not be disabled. With a text editor (e.g. \"nano\") open the central sedex Client configuration file named \"sedex Client-configuration.properties\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Add the following configuration parameter to the configuration file and save it: websocket.enabled=false Note: Restart container to activate changes","title":"Disable WebSocket protocol"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html#disable-sedex-webservice-proxy","text":"By default, the sedex Client is starting the sedex Webservice Proxy functionality. If not used, the sedex Webservice Proxy can be disabled in order to save some resources (CPU, memory). With a text editor (e.g. \"nano\") open the central sedex Client configuration file named \"sedex Client-configuration.properties\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Set the following configuration parameter in the configuration file to false and save it: wsproxy.start=false Note: Restart container to activate changes","title":"Disable sedex Webservice Proxy"},{"location":"client-container-v6/_old_/sedex-client-configuration-options.html#custom-sedex-webservice-proxy-endpoints","text":"Normally the definitions of the web services offered by the sedex Web Service Proxy are automatically provisioned and require no manual configuration. But if you are developing or testing a new web service that should be offered via sedex Web Service Proxy, it may be necessary to manually configure test instances of services. For this purpose the backend endpoint of a web service proxy can be overridden locally in the central sedex Client configuration file: $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Adding the following line overrides the endpoint for the Web service with name my-service (adapt name to your service): wsproxy.services.my-service.target-url=https://www.example.com/path e.g. override the endpoint of the web service UPIQueryService: wsproxy.services.UPIQueryService.target-url=https://wupi-test.zas.admin.ch/wupi_cc/UPIQueryService If no entry is made for a particular service, the default endpoint defined by sedex is used. Note: If the custom endpoint of a Web service requires a custom SSL/TLS-certificate not contained in the standard sedex truststore, you can override the default truststore as follows. Copy your custom SSL/TLS-certificate (e.g. upiquery-test.cer) into the local certificate folder of your sedex Client: $ cp /path/to/yourTLSCert.cer /path/to/sedex-data/conf/certificates/upiquery-test.cer Add the following configuration line to the central sedex Client configuration file referencing your certificate file: wsproxy.services.UPIQueryService.target-tls-certificate-filename=upiquery-test.cer","title":"Custom sedex Webservice Proxy endpoints"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html","text":"sedex Web Service Proxy Configuration This page describes how to configure the web service proxy functionality of the sedex Client. If you only use asynchronous sedex messaging, this page is not relevant for you. Purpose of the Web Service Proxy The web service proxy (WS-Proxy) is an add-on component of the sedex Client offering local access to defined remote Web services. For the business application it looks as if the sedex web service proxy would offer the web service. In fact, the sedex WS-Proxy is only an intermediary between the application and the actual web service. To establish a secure SSL/TLS connection to the actual web service, the WS-Proxy uses the participant's sedex certificate. This allows the service provider to unambiguously identify the caller and to check whether this caller is authorized to use the service or not. Activating Web Service Proxy Whether the WS-Proxy is active or not is controlled by a property in the central client configuration. The following excerpt from a sample configuration shows an activated WS-Proxy: wsproxy.start=true Checking if Web service proxy is active On the monitoring page of a running sedex Client, you can check whether the WS-Proxy is active. If at least some of the \u201cwsp\u201d elements shown below are contained, the web service proxy is active. If there are no entries starting with the prefix \u201cwsp-\u201c, then the WS-Proxy is not active. [...] wsp-https-port=8443 wsp-https-tls-certificate-subject=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-issuer=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-create-date=2019-12-04T12:43:54 wsp-https-tls-certificate-expiry-date=2024-12-02T12:43:54 wsp-https-tls-certificate-alternative-names=wsproxy,localhost wsp-https-tls-certificate-is-valid=true wsp-http-disabled=false wsp-http-port=8080 wsp-uptime=00:05:55 wsp-users-allow-anonymous=true wsp-version=WsProxy 6.0.0 wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true wsp-webservice-last-call=controller-uptime=00:06:00 [...] Configuring Web Service Proxy The WS proxy is configured via the main configuration file of the sedex Client: <sedex_home>/conf/sedex Client-configuration.properties In this section, the configuration parameters specific to the WS-Proxy are described. Enabling & disabling Web Service Proxy If the WS-Proxy functionality is not required, it can be switched off using the following configuration setting: wsproxy.start=false Disabling Anonymous Access Regarding access control there are two basic types of web services: Unrestricted webservices - allowing anonymous access\\ These are web services that are open for everybody with network access to the WS-Proxy. This means that a business application can call the web service via WS-Proxy without indicating a username and password. One says that such a caller is anonymous to the WS-Proxy. Restricted webservices - requiring an authenticated and authorized user\\ These are web services that are restricted to a group of known and authorized users. This means that a business application can only call the web service together with a valid username & password combination. One says that such a caller is authenticated by the WS-Proxy. Once authenticated, a user can be authorized, i.e. it can be checked whether he has the right to use the service or not. The web service definitions provided by sedex determine which web service may be called anonymously and which not. If it is desired for security reasons to completely deactivate anonymous access to webservices, this can be achieved with the following setting: wsproxy.users.allowAnonymous=false Note: If anonymous access is switched off, all accesses from business applications to web services must be made via the https protocol and with user name & password. Local Network Endpoints Configuration The sedex WS-Proxy offers two separate network endpoints where business applications can send their web service requests to: Endpoint for access using http (unsecured) \\ Web service requests and responses are transmitted using the http protocol . This means that the communication between the business application and the WS-Proxy is open/unsecured. Up to version 5.3 the sedex WS-Proxy only offered this endpoint. Endpoint for access using https (secured) \\ Web service requests and responses are transmitted using the https protocol . This means that the communication between the business application and the WS-Proxy is cryptographically secured using SSL/TLS . As of version 6.0, the sedex WS proxy also offers this endpoint. This endpoint should be preferred. Note: The web service definitions provided by sedex determine which web service may be called over http and which not. See section 11.8.2 on how to check which web services are available over http and which are only available over https. Note: Even when the business application accesses the WS-Proxy via unencrypted http, the connection between the WS-Proxy and the effective web service is always secured and encrypted via https. The properties allowing the configuration of the http and https endpoints are described below. Unsecured http port The unsecured http port number on the inside of the container is 8080. You can publish/map this port to the desired port number on the outside using your container platform. Note: You can omit this port publication/mapping if the WS-Proxy will not be used or will only be used via https. --publish YOUR_WS_PROXY_HTTP_PORT:8080 Secured https port The secured https port number on the inside of the container is 8443. You can publish/map this port to the desired port number on the outside using your container platform. --publish YOUR_WS_PROXY_HTTPS_PORT:8443 SSL/TLS Certificate Configuration As of version 6.0, the WS-Proxy offers the possibility of a secure communication between the business application and the WS-Proxy using https protocol. The https protocol is based on SSL/TLS standard for the cryptographic protection of the communication channel. This requires a special SSL/TLS certificate to be installed and configured in the WS-Proxy. Basically two types of SSL/TLS certificates can be used: Generated by the sedex Client (self-signed certificate) \\ If the client is started and no SSL/TLS certificate is configured, the client automatically generates a new self-signed certificate. Existing certificate provided by the operator (may be an official SSL/TLS certificate) \\ The operator of a sedex Client can obtain and use an official SSL/TLS certificate from a certificate provider and configure this in the sedex Client. Note: A self-signed certificate is a certificate that is not signed by a public and generally trusted certificate authority (CA). These certificates are easy to make and are free. A disadvantage of self-signed certificates is that they are not automatically trusted. This means that such certificates must always be added manually to the trust store of a user \u2013 here the business application calling the WS-Proxy. Using the self-signed certificate generated by the sedex Client If the sedex Client does not find an SSL/TLS certificate for the WS proxy at startup, it automatically generates and configures a self-signed certificate. Notes regarding the self-signed certificate: The self-signed certificate is valid for 5 years. You can find the expiration date on the monitoring page of the sedex Client. If you want to recreate the certificate, simply delete the path to the certificate from the property in the configuration file:\\ wsproxy.https.key-store-file= The generated certificate is valid for all host names that the sedex Client could automatically detect. The WS-Proxy writes these host names to the log file during the creation of the self-signed certificate. Alternately, you can open and examine the certificate. To create a self-signed certificate with an additional host name of your choice do the following steps: 1. add the parameter wsproxy.https.hostname=your-host-name 2. Delete the value of the parameter wsproxy.https.key-store-file= 3. Let the the certificate be recreated by restarting the sedex Client The generated certificate is valid for all host names that the sedex Client could automatically detect. The keystore file generated for the self-signed certificate is in P12 format and is stored under the following path: sedex-data/conf/certificates Additionally a CER file containing the public certificate is created. You can pass this file on to the developers or operators of the business application so that they can include the self-signed certificate in their trust store. Using an existing certificate provided by the operator If you already have a valid SSL/TLS certificate, the WS proxy can be configured to use it for its https endpoint. In order to use your own certificate, it must be in one of the following formats: - PKCS#12 (p12 file) - Java Key Store (jks file) Note: The keystore provided must contain both the private key and the certificate under the same alias name. Tip: The freely available Java based tool \u201cKeyStore Explorer\u201d (https://keystore-explorer.org) allows the comfortable editing of Keystore files. Among other things, you can create a keystore from private keys and certificates in separate files, which can then be used by WS-Proxy. Once you have your own SSL/TLS certificate in a supported format, you can install and configure it in the sedex Client as follows: Copy your keystore file (e.g. my-ssl-keystore.p12) into the sedex Client configuration folder for certificates:\\ sedex-data/conf/certificates/my-ssl-keystore.p12 Configure your keystore file in the sedex Client\u2019s main configuration file: - *Path to the keystore file* wsproxy.https.key-store-file=my-ssl-keystore.p12 - *Password with which the keystore file is secured* wsproxy.https.key-store-password=myKeystorePassword - *Alias name of the key to use* A keystore file may contain one or many private keys. To select the correct key, its alias name must be specified. If you don't know the alias name, you can examine the content of the keystore with a suitable tool (e.g. with the KeyStore Explorer mentioned above). wsproxy.https.key-alias=my-key-alias - *Password for accessing the key to use* Within a keystore, a separate password can be set again for each key. If no separate password has been set for the key, enter the password for the keystore again here. wsproxy.https.key-password=myPrivatePasswordForTheKey Restart the sedex Client and check the log file of WS-Proxy for errors. Administering Web Service Proxy Users As of sedex Client version 6.0, the sedex WS-Proxy supports the feature to restrict access to the web services it offers. This means that a business application can only call the web service if it has a valid username & password combination. The allowed usernames and their passwords are contained in a separate WS-Proxy user configuration file. This sections describes the content and the basic administration of the WS-Proxy user configuration file. The WS-Proxy User Configuration File Usernames and passwords are configured in the following user configuration file: sedex-data/conf/sedex-wsproxy-user-configuration.properties This is an excerpt from the configuration file showing two configured users: # File: sedex-wsproxy-user-configuration.properties [\u2026] example-app-1=myNewAndSecurePassword,3-CH-55438 example-app-2={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-2874423 [\u2026] The format of the entries in the configuration file is as follows: user_name=password,sedex-id The elements of an entry (i.e. line of the configuration file) in detail are: - user_name: A freely definable username that represents your application calling the sedex webservice proxy. Allowed characters: a-z, A-Z, 0-9, -, _ - password: The password of the user. Allowed characters: a-z, A-Z, 0-9, -, _ - sedex-id: The associated sedex ID is that of the physical or logical sedex participant for whom the remote Web service is called. The specific sedex-id to be used is provided either by your sedex domain administrator or by FSO\u2019s sedex customer support. Please note: - Changes to the users file only become active after a restart of the sedex Client. - New passwords can be specified in plain text. - For security reasons, plain text passwords are automatically encrypted during a restart of the sedex Client. - Encrypted passwords will look like: {bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxgk98zwNAUWPOa1nGgot01wldBVam - A once encrypted and forgotten password has to be reset by deleting the old encrypted password (including the {bcrypt} part} and replacing it by a new password in plain text. Add a new user If a new business application (e.g. named \u00abmyApp\u00bb) needs access to one or more web services via sedex WS-Proxy, a new user representing this application has to be added to the user configuration file: Open the user configuration file in a text editor Add a line for the new user (e.g. at the end of the file): myApp=aRandomPassword,sedexIdOfThisApplication Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors or warnings Change the password of a user The password of a user can be changed as follows: Open the user configuration file in a text editor For the intended user change the password element as shown below.\\ \\ Before (with the old encrypted password): myApp={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-3322 After (with the new plain password): myApp=aNewRandomPassword,1-CH-3322 Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors.\\ You should see a line indicating that a previously plain password has been encrypted: Provided Web Services Automatic Provisioning of Webservice Definitions The web service definitions are automatically retrieved from the sedex server by the sedex Client and updated regularly. To ensure that the WS proxy still functions even if the sedex server cannot be reached, the web service definitions are cached locally by the sedex Client. This cache can be used for a maximum of one week. If the list of Web service definitions cannot be updated for more than a week, the Web service proxy stops its service with an error message in the log and the Web service responses. The information as to whether the web service definitions can be updated and how long they are valid can be taken from the client\u2019s monitoring page: [\u2026] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true [\u2026] List of provided Web Services The list of web services offered on a WS-Proxy differs from sedex participant to sedex participant and depends on the rights configured on the sedex server for this participant. The list of Web services currently available for a specific client can be viewed via its monitoring page. The following excerpt shows four defined webservices: [\u2026] wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] [\u2026] The elements of a web service definition are: URL Path on the WS-Proxy Path of the Web service on the WS proxy. The complete URL of the Web service is therefore derived from the protocol, host name, port, and this path as in the following example: https://myWsProxyHost:8443/wsproxy/services/CheckSedexWebService Supported protocols Specifies which protocols can be used to call the Web service via WS proxy. Possible are http (unsecured) and https (secured). Access control Specifies whether the web service can be called anonymously via WS proxy or exclusively with user name & password. Possible are anonymous and authorized.","title":"sedex Web Service Proxy Configuration"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#sedex-web-service-proxy-configuration","text":"This page describes how to configure the web service proxy functionality of the sedex Client. If you only use asynchronous sedex messaging, this page is not relevant for you.","title":"sedex Web Service Proxy Configuration"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#purpose-of-the-web-service-proxy","text":"The web service proxy (WS-Proxy) is an add-on component of the sedex Client offering local access to defined remote Web services. For the business application it looks as if the sedex web service proxy would offer the web service. In fact, the sedex WS-Proxy is only an intermediary between the application and the actual web service. To establish a secure SSL/TLS connection to the actual web service, the WS-Proxy uses the participant's sedex certificate. This allows the service provider to unambiguously identify the caller and to check whether this caller is authorized to use the service or not.","title":"Purpose of the Web Service Proxy"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#activating-web-service-proxy","text":"Whether the WS-Proxy is active or not is controlled by a property in the central client configuration. The following excerpt from a sample configuration shows an activated WS-Proxy: wsproxy.start=true","title":"Activating Web Service Proxy"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#checking-if-web-service-proxy-is-active","text":"On the monitoring page of a running sedex Client, you can check whether the WS-Proxy is active. If at least some of the \u201cwsp\u201d elements shown below are contained, the web service proxy is active. If there are no entries starting with the prefix \u201cwsp-\u201c, then the WS-Proxy is not active. [...] wsp-https-port=8443 wsp-https-tls-certificate-subject=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-issuer=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-create-date=2019-12-04T12:43:54 wsp-https-tls-certificate-expiry-date=2024-12-02T12:43:54 wsp-https-tls-certificate-alternative-names=wsproxy,localhost wsp-https-tls-certificate-is-valid=true wsp-http-disabled=false wsp-http-port=8080 wsp-uptime=00:05:55 wsp-users-allow-anonymous=true wsp-version=WsProxy 6.0.0 wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true wsp-webservice-last-call=controller-uptime=00:06:00 [...]","title":"Checking if Web service proxy is active"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#configuring-web-service-proxy","text":"The WS proxy is configured via the main configuration file of the sedex Client: <sedex_home>/conf/sedex Client-configuration.properties In this section, the configuration parameters specific to the WS-Proxy are described.","title":"Configuring Web Service Proxy"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#enabling-disabling-web-service-proxy","text":"If the WS-Proxy functionality is not required, it can be switched off using the following configuration setting: wsproxy.start=false","title":"Enabling &amp; disabling Web Service Proxy"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#disabling-anonymous-access","text":"Regarding access control there are two basic types of web services: Unrestricted webservices - allowing anonymous access\\ These are web services that are open for everybody with network access to the WS-Proxy. This means that a business application can call the web service via WS-Proxy without indicating a username and password. One says that such a caller is anonymous to the WS-Proxy. Restricted webservices - requiring an authenticated and authorized user\\ These are web services that are restricted to a group of known and authorized users. This means that a business application can only call the web service together with a valid username & password combination. One says that such a caller is authenticated by the WS-Proxy. Once authenticated, a user can be authorized, i.e. it can be checked whether he has the right to use the service or not. The web service definitions provided by sedex determine which web service may be called anonymously and which not. If it is desired for security reasons to completely deactivate anonymous access to webservices, this can be achieved with the following setting: wsproxy.users.allowAnonymous=false Note: If anonymous access is switched off, all accesses from business applications to web services must be made via the https protocol and with user name & password.","title":"Disabling Anonymous Access"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#local-network-endpoints-configuration","text":"The sedex WS-Proxy offers two separate network endpoints where business applications can send their web service requests to: Endpoint for access using http (unsecured) \\ Web service requests and responses are transmitted using the http protocol . This means that the communication between the business application and the WS-Proxy is open/unsecured. Up to version 5.3 the sedex WS-Proxy only offered this endpoint. Endpoint for access using https (secured) \\ Web service requests and responses are transmitted using the https protocol . This means that the communication between the business application and the WS-Proxy is cryptographically secured using SSL/TLS . As of version 6.0, the sedex WS proxy also offers this endpoint. This endpoint should be preferred. Note: The web service definitions provided by sedex determine which web service may be called over http and which not. See section 11.8.2 on how to check which web services are available over http and which are only available over https. Note: Even when the business application accesses the WS-Proxy via unencrypted http, the connection between the WS-Proxy and the effective web service is always secured and encrypted via https. The properties allowing the configuration of the http and https endpoints are described below. Unsecured http port The unsecured http port number on the inside of the container is 8080. You can publish/map this port to the desired port number on the outside using your container platform. Note: You can omit this port publication/mapping if the WS-Proxy will not be used or will only be used via https. --publish YOUR_WS_PROXY_HTTP_PORT:8080 Secured https port The secured https port number on the inside of the container is 8443. You can publish/map this port to the desired port number on the outside using your container platform. --publish YOUR_WS_PROXY_HTTPS_PORT:8443","title":"Local Network Endpoints Configuration"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#ssltls-certificate-configuration","text":"As of version 6.0, the WS-Proxy offers the possibility of a secure communication between the business application and the WS-Proxy using https protocol. The https protocol is based on SSL/TLS standard for the cryptographic protection of the communication channel. This requires a special SSL/TLS certificate to be installed and configured in the WS-Proxy. Basically two types of SSL/TLS certificates can be used: Generated by the sedex Client (self-signed certificate) \\ If the client is started and no SSL/TLS certificate is configured, the client automatically generates a new self-signed certificate. Existing certificate provided by the operator (may be an official SSL/TLS certificate) \\ The operator of a sedex Client can obtain and use an official SSL/TLS certificate from a certificate provider and configure this in the sedex Client. Note: A self-signed certificate is a certificate that is not signed by a public and generally trusted certificate authority (CA). These certificates are easy to make and are free. A disadvantage of self-signed certificates is that they are not automatically trusted. This means that such certificates must always be added manually to the trust store of a user \u2013 here the business application calling the WS-Proxy. Using the self-signed certificate generated by the sedex Client If the sedex Client does not find an SSL/TLS certificate for the WS proxy at startup, it automatically generates and configures a self-signed certificate. Notes regarding the self-signed certificate: The self-signed certificate is valid for 5 years. You can find the expiration date on the monitoring page of the sedex Client. If you want to recreate the certificate, simply delete the path to the certificate from the property in the configuration file:\\ wsproxy.https.key-store-file= The generated certificate is valid for all host names that the sedex Client could automatically detect. The WS-Proxy writes these host names to the log file during the creation of the self-signed certificate. Alternately, you can open and examine the certificate. To create a self-signed certificate with an additional host name of your choice do the following steps: 1. add the parameter wsproxy.https.hostname=your-host-name 2. Delete the value of the parameter wsproxy.https.key-store-file= 3. Let the the certificate be recreated by restarting the sedex Client The generated certificate is valid for all host names that the sedex Client could automatically detect. The keystore file generated for the self-signed certificate is in P12 format and is stored under the following path: sedex-data/conf/certificates Additionally a CER file containing the public certificate is created. You can pass this file on to the developers or operators of the business application so that they can include the self-signed certificate in their trust store. Using an existing certificate provided by the operator If you already have a valid SSL/TLS certificate, the WS proxy can be configured to use it for its https endpoint. In order to use your own certificate, it must be in one of the following formats: - PKCS#12 (p12 file) - Java Key Store (jks file) Note: The keystore provided must contain both the private key and the certificate under the same alias name. Tip: The freely available Java based tool \u201cKeyStore Explorer\u201d (https://keystore-explorer.org) allows the comfortable editing of Keystore files. Among other things, you can create a keystore from private keys and certificates in separate files, which can then be used by WS-Proxy. Once you have your own SSL/TLS certificate in a supported format, you can install and configure it in the sedex Client as follows: Copy your keystore file (e.g. my-ssl-keystore.p12) into the sedex Client configuration folder for certificates:\\ sedex-data/conf/certificates/my-ssl-keystore.p12 Configure your keystore file in the sedex Client\u2019s main configuration file: - *Path to the keystore file* wsproxy.https.key-store-file=my-ssl-keystore.p12 - *Password with which the keystore file is secured* wsproxy.https.key-store-password=myKeystorePassword - *Alias name of the key to use* A keystore file may contain one or many private keys. To select the correct key, its alias name must be specified. If you don't know the alias name, you can examine the content of the keystore with a suitable tool (e.g. with the KeyStore Explorer mentioned above). wsproxy.https.key-alias=my-key-alias - *Password for accessing the key to use* Within a keystore, a separate password can be set again for each key. If no separate password has been set for the key, enter the password for the keystore again here. wsproxy.https.key-password=myPrivatePasswordForTheKey Restart the sedex Client and check the log file of WS-Proxy for errors.","title":"SSL/TLS Certificate Configuration"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#administering-web-service-proxy-users","text":"As of sedex Client version 6.0, the sedex WS-Proxy supports the feature to restrict access to the web services it offers. This means that a business application can only call the web service if it has a valid username & password combination. The allowed usernames and their passwords are contained in a separate WS-Proxy user configuration file. This sections describes the content and the basic administration of the WS-Proxy user configuration file.","title":"Administering Web Service Proxy Users"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#the-ws-proxy-user-configuration-file","text":"Usernames and passwords are configured in the following user configuration file: sedex-data/conf/sedex-wsproxy-user-configuration.properties This is an excerpt from the configuration file showing two configured users: # File: sedex-wsproxy-user-configuration.properties [\u2026] example-app-1=myNewAndSecurePassword,3-CH-55438 example-app-2={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-2874423 [\u2026] The format of the entries in the configuration file is as follows: user_name=password,sedex-id The elements of an entry (i.e. line of the configuration file) in detail are: - user_name: A freely definable username that represents your application calling the sedex webservice proxy. Allowed characters: a-z, A-Z, 0-9, -, _ - password: The password of the user. Allowed characters: a-z, A-Z, 0-9, -, _ - sedex-id: The associated sedex ID is that of the physical or logical sedex participant for whom the remote Web service is called. The specific sedex-id to be used is provided either by your sedex domain administrator or by FSO\u2019s sedex customer support. Please note: - Changes to the users file only become active after a restart of the sedex Client. - New passwords can be specified in plain text. - For security reasons, plain text passwords are automatically encrypted during a restart of the sedex Client. - Encrypted passwords will look like: {bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxgk98zwNAUWPOa1nGgot01wldBVam - A once encrypted and forgotten password has to be reset by deleting the old encrypted password (including the {bcrypt} part} and replacing it by a new password in plain text.","title":"The WS-Proxy User Configuration File"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#add-a-new-user","text":"If a new business application (e.g. named \u00abmyApp\u00bb) needs access to one or more web services via sedex WS-Proxy, a new user representing this application has to be added to the user configuration file: Open the user configuration file in a text editor Add a line for the new user (e.g. at the end of the file): myApp=aRandomPassword,sedexIdOfThisApplication Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors or warnings","title":"Add a new user"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#change-the-password-of-a-user","text":"The password of a user can be changed as follows: Open the user configuration file in a text editor For the intended user change the password element as shown below.\\ \\ Before (with the old encrypted password): myApp={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-3322 After (with the new plain password): myApp=aNewRandomPassword,1-CH-3322 Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors.\\ You should see a line indicating that a previously plain password has been encrypted:","title":"Change the password of a user"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#provided-web-services","text":"","title":"Provided Web Services"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#automatic-provisioning-of-webservice-definitions","text":"The web service definitions are automatically retrieved from the sedex server by the sedex Client and updated regularly. To ensure that the WS proxy still functions even if the sedex server cannot be reached, the web service definitions are cached locally by the sedex Client. This cache can be used for a maximum of one week. If the list of Web service definitions cannot be updated for more than a week, the Web service proxy stops its service with an error message in the log and the Web service responses. The information as to whether the web service definitions can be updated and how long they are valid can be taken from the client\u2019s monitoring page: [\u2026] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true [\u2026]","title":"Automatic Provisioning of Webservice Definitions"},{"location":"client-container-v6/_old_/sedex-webservice-proxy.html#list-of-provided-web-services","text":"The list of web services offered on a WS-Proxy differs from sedex participant to sedex participant and depends on the rights configured on the sedex server for this participant. The list of Web services currently available for a specific client can be viewed via its monitoring page. The following excerpt shows four defined webservices: [\u2026] wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] [\u2026] The elements of a web service definition are: URL Path on the WS-Proxy Path of the Web service on the WS proxy. The complete URL of the Web service is therefore derived from the protocol, host name, port, and this path as in the following example: https://myWsProxyHost:8443/wsproxy/services/CheckSedexWebService Supported protocols Specifies which protocols can be used to call the Web service via WS proxy. Possible are http (unsecured) and https (secured). Access control Specifies whether the web service can be called anonymously via WS proxy or exclusively with user name & password. Possible are anonymous and authorized.","title":"List of provided Web Services"},{"location":"client-container-v6/configuration/container-options.html","text":"Advanced Docker Configuration This page describes advanced aspects of Docker Container configuration. Most of these options are rarely needed. Timezone The default timezone in the sedex Client Docker container is \"Europe/Zurich\" (i.e. local Swiss time). If you have to set another timezone (e.g. UTC) then set the environment variable TZ by adding the following option to your container run statement: --env TZ=UTC Running the sedex Client as a non-root user Non-root container images add an extra layer of security and are generally recommended for production environments. The following steps describe how to set up a non-root group and user in case the host environment does not already provide these. Step 1: Create a non-root group on the host machine Determine a group ID (501 in the this example) that is unique on the host machine and create the group (the name does not have to be \"sedex-group\"). $ groupadd --gid 501 sedex-group Step 2: Create a non-root user on the host machine Determine a user ID (901 in the this example) that is unique on the host machine and create the user (the name does not have to be \"sedex-user\"), assign it to the group created in the previous step, and specifying its home directory. $ useradd --uid 901 --no-log-init --gid sedex-group --create-home --home-dir /opt/sedexclient/ sedex-user Step 3: Set the group and owner of the sedex-data directories If the sedex Client will run as a non-root user inside of the Docker container, set the group and owner of the whole sedex-data directory tree and its contents so that the non-root user can access them. $ chown --recursive sedex-user:sedex-group /path/to/sedex-data Step 4: Run the sedex Client container as a non-root user Run the sedex Client container using environment-specific values for the following options: /path/to/sedex-data - The path to the host's \"sedex-data\" directory (holding the persisted data) YOUR_MONITORING_PORT - The port at which the monitoring web page of the sedex Client should be accessible from the outside of the container YOUR_WS_PROXY_HTTP_PORT - The unsecured http port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used or will only be used via https. YOUR_WS_PROXY_HTTPS_PORT - The secured https port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used. --stop-timeout 65 - When the docker container is stopped (e.g. with \"docker stop\" command), the sedex Client's controller-stop.sh is executed to initiate a graceful shutdown of the client. This typically takes longer than the default 10 seconds that the Docker daemon waits before killing the container. The --stop-timeout option overrides the default. The required time will vary from one installation to another. --restart unless-stopped - Restart Policy: Restart the container automatically after Docker daemon restarts, unless the container has been stopped intentionally. --user - User: Sets the UID and GID used to start the sedex Client. -d - Detached: Start container in background without showing log output on console. To run the sedex Client container as a non root user enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ --user 901:501 \\ -d \\ sedexch/sedex-client:latest Running the Container in Read-Only mode The sedex Client Docker container can be started with a read-only root filesystem, which further increases the security of the container. To run the sedex Client container with its root filesystem mounted as read-only enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ --read-only \\ -d \\ sedexch/sedex-client:latest The Docker option --read-only mounts the container\u2019s root filesystem as read only prohibiting writes to locations other than the specified volumes for the container. Running a specific version of the container If your are referencing the container by its name \"sedexch/sedex-client\" the version with the tag \"latest\" is automatically selected. To use a specific sedex Client version and/or or a specific container version, use a versioned tag explicitly. View the list of available versions in the Docker hub registry. Note: For simplicity the run parameters are ommited in the following examples. These parameters have to be set as described in the run example above. Example: Run the latest Docker container of the latest sedex Client: $ docker run sedexch/sedex-client or $ docker run sedexch/sedex-client:latest Example: Run the latest Docker container of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0 Example: Run the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0_container-0.95-beta Pulling a specific image version The \"docker run\" command does not automatically download a newer image from docker hub, if an older image with that name and tag is available locally. In this case you have to manually issue a \"docker pull\" command, to download the newest images from docher hub. Example: Get the latest Docker container of the latest sedex Client: $ docker pull sedexch/sedex-client Example: Get the latest Docker container of the sedex Client 5.3.1: $ docker pull sedexch/sedex-client:6.0.0 Example: Get the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker pull sedexch/sedex-client:6.0.0_container-0.95-beta Separate permanent stores for conf, log, etc. For the permanent store of data outside the container, most users will be happy to use one single directory \"sedex-data\" that holds all the different data types in one place: configuration sedex messages messaging state log files etc. There are good reasons to separate these stores, e.g. different users and permissions. So you can mount the different subdirectories seperately: $ mkdir /path/to/sedex-conf $ mkdir /path/to/sedex-interface $ mkdir /path/to/sedex-internal $ mkdir /path/to/sedex-logs $ mkdir /path/to/sedex-monitoring $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-conf,destination=/sedex-data/conf/ \\ --mount type=bind,source=/path/to/sedex-interface,destination=/sedex-data/interface/ \\ --mount type=bind,source=/path/to/sedex-internal,destination=/sedex-data/internal/ \\ --mount type=bind,source=/path/to/sedex-logs,destination=/sedex-data/logs/ \\ --mount type=bind,source=/path/to/sedex-monitoring,destination=/sedex-data/monitoring/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest","title":"Docker Container"},{"location":"client-container-v6/configuration/container-options.html#advanced-docker-configuration","text":"This page describes advanced aspects of Docker Container configuration. Most of these options are rarely needed.","title":"Advanced Docker Configuration"},{"location":"client-container-v6/configuration/container-options.html#timezone","text":"The default timezone in the sedex Client Docker container is \"Europe/Zurich\" (i.e. local Swiss time). If you have to set another timezone (e.g. UTC) then set the environment variable TZ by adding the following option to your container run statement: --env TZ=UTC","title":"Timezone"},{"location":"client-container-v6/configuration/container-options.html#running-the-sedex-client-as-a-non-root-user","text":"Non-root container images add an extra layer of security and are generally recommended for production environments. The following steps describe how to set up a non-root group and user in case the host environment does not already provide these.","title":"Running the sedex Client as a non-root user"},{"location":"client-container-v6/configuration/container-options.html#running-the-container-in-read-only-mode","text":"The sedex Client Docker container can be started with a read-only root filesystem, which further increases the security of the container. To run the sedex Client container with its root filesystem mounted as read-only enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ --read-only \\ -d \\ sedexch/sedex-client:latest The Docker option --read-only mounts the container\u2019s root filesystem as read only prohibiting writes to locations other than the specified volumes for the container.","title":"Running the Container in Read-Only mode"},{"location":"client-container-v6/configuration/container-options.html#running-a-specific-version-of-the-container","text":"If your are referencing the container by its name \"sedexch/sedex-client\" the version with the tag \"latest\" is automatically selected. To use a specific sedex Client version and/or or a specific container version, use a versioned tag explicitly. View the list of available versions in the Docker hub registry. Note: For simplicity the run parameters are ommited in the following examples. These parameters have to be set as described in the run example above. Example: Run the latest Docker container of the latest sedex Client: $ docker run sedexch/sedex-client or $ docker run sedexch/sedex-client:latest Example: Run the latest Docker container of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0 Example: Run the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker run sedexch/sedex-client:6.0.0_container-0.95-beta","title":"Running a specific version of the container"},{"location":"client-container-v6/configuration/container-options.html#pulling-a-specific-image-version","text":"The \"docker run\" command does not automatically download a newer image from docker hub, if an older image with that name and tag is available locally. In this case you have to manually issue a \"docker pull\" command, to download the newest images from docher hub. Example: Get the latest Docker container of the latest sedex Client: $ docker pull sedexch/sedex-client Example: Get the latest Docker container of the sedex Client 5.3.1: $ docker pull sedexch/sedex-client:6.0.0 Example: Get the Docker container 0.95-beta of the sedex Client 6.0.0: $ docker pull sedexch/sedex-client:6.0.0_container-0.95-beta","title":"Pulling a specific image version"},{"location":"client-container-v6/configuration/container-options.html#separate-permanent-stores-for-conf-log-etc","text":"For the permanent store of data outside the container, most users will be happy to use one single directory \"sedex-data\" that holds all the different data types in one place: configuration sedex messages messaging state log files etc. There are good reasons to separate these stores, e.g. different users and permissions. So you can mount the different subdirectories seperately: $ mkdir /path/to/sedex-conf $ mkdir /path/to/sedex-interface $ mkdir /path/to/sedex-internal $ mkdir /path/to/sedex-logs $ mkdir /path/to/sedex-monitoring $ docker run \\ --name sedex Client \\ --mount type=bind,source=/path/to/sedex-conf,destination=/sedex-data/conf/ \\ --mount type=bind,source=/path/to/sedex-interface,destination=/sedex-data/interface/ \\ --mount type=bind,source=/path/to/sedex-internal,destination=/sedex-data/internal/ \\ --mount type=bind,source=/path/to/sedex-logs,destination=/sedex-data/logs/ \\ --mount type=bind,source=/path/to/sedex-monitoring,destination=/sedex-data/monitoring/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest","title":"Separate permanent stores for conf, log, etc."},{"location":"client-container-v6/configuration/sedex-client-options.html","text":"Advanced Configuration of the sedex Client This page describes advanced aspects of sedex Client configuration. Most of these options are rarely needed. Default configuration During the very first start of the sedex Client container, the initial configuration takes place. This creates a default configuration, which can be used unchanged in most cases. Setting custom configuration parameters should rarely be necessary, but can be done as described on this page. Custom Configuration The sedex client can be configured by setting configuration parameters in the form of specific key-value pairs. These configurations parameters can be set in two ways: in the sedex Client's central configuration file as environment variables of the Docker container Environment variables of higher priority If the same key is defined both in the central configuration file and as an environment variable, the environment variable value has a higher priority and will be used. This means that environment variables override the configuration file. Both configuration types are described in more detail in the following. Via the central sedex Client configuration file Custom configuration parameters can be set in the central sedex Client configuration file (\"sedex-client-configuration.properties). Specific key-value pairs can be set using the configuration file as follows: With a text editor (e.g. \"nano\" or \"notepad\") open the central sedex Client configuration file named \"sedex-lient-configuration.properties\" located in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Add the necessary configuration parameter(s) to the configuration file and save it. key_name_1=value_1 key_name_2=value_2 Restart the sedex Client container in order to activate the new configuration Via Docker Container Environment Variables Custom configuration parameters can be set via environment variables of the Docker container. Specific key-value pairs can be set using environment variables as follows: Stop & Delete the current sedex Client container $ docker stop sedex-client $ docker rm sedex-client Run the sedex Client container and add the necessary configuration parameter(s) as environment variables $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex-client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ --env KEY_NAME_1=VALUE_1 \\ --env KEY_NAME_2=VALUE_2 \\ sedexch/sedex-client:latest Available Configuration Parameters for the sedex Client The following configuration parameters for the sedex client are available. Internet access via HTTP-Proxy If an HTTP proxy is required to access the Internet, such a proxy server can be added as a custom configuration # Proxy settings: Set these values only if you reach the Internet in your network only through a proxy # Example: host=proxy.example.ch port=8080 user=example-user password=1234 outgoing-web-proxy.host=proxy.example.ch outgoing-web-proxy.port=8080 outgoing-web-proxy.user=example-user outgoing-web-proxy.password=1234 You have no username/password? Leave the user/password parameters blank if proxy server authentication is not required. Disable WebSocket protocol By default, the sedex Client uses the WebSocket protocol to reduce round trip times by actively notifying the client using events sent from the server to the client. In extremely rare cases (approx. 1% of all clients), the WebSocket protocol can cause communication problems with network components on the client side. If such a problem is detected, the use of WebSocket can manually be deactivated. As a result, the client can only use the so-called polling mode, which leads to longer message round trip times (about 10 minutes instead of a few seconds), but the sedex Client can still offer the basic functionality without websocket if required. If disbaling WebSocket is required, this can be achieved by adding the following custom configuration websocket.enabled=false Disable Websocket communication only if it is really necessary. Normally the web socket communication should not be disabled, as this has a negative impact on sedex's performance. Disable sedex Webservice Proxy By default, the sedex Client is starting the sedex Webservice Proxy functionality. If not used, the sedex Webservice Proxy can be disabled in order to save some resources (CPU, memory). Disable the sedex Webservice Proxy by adding the following custom configuration wsproxy.start=false Custom sedex Webservice Proxy endpoints Normally the definitions of the web services offered by the sedex Web Service Proxy are automatically provisioned and require no manual configuration. But if you are developing or testing a new web service that should be offered via sedex Web Service Proxy, it may be necessary to manually configure test instances of services. Adding the following configuration parameter overrides the endpoint for the Web service with name my-service (adapt name to your service): wsproxy.services.my-service.target-url=https://www.example.com/path Example: override the endpoint of the web service UPIQueryService: wsproxy.services.UPIQueryService.target-url=https://wupi-test.zas.admin.ch/wupi_cc/UPIQueryService If no entry is made for a particular service, the default endpoint defined by sedex is used. Note: If the custom endpoint of a Web service requires a custom SSL/TLS-certificate not contained in the standard sedex truststore, you can override the default truststore as follows. Copy your custom SSL/TLS-certificate (e.g. upiquery-test.cer) into the local certificate folder of your sedex Client: $ cp /path/to/yourTLSCert.cer /path/to/sedex-data/conf/certificates/upiquery-test.cer Add the following configuration parameter referencing your certificate file: wsproxy.services.UPIQueryService.target-tls-certificate-filename=upiquery-test.cer","title":"sedex-Client"},{"location":"client-container-v6/configuration/sedex-client-options.html#advanced-configuration-of-the-sedex-client","text":"This page describes advanced aspects of sedex Client configuration. Most of these options are rarely needed.","title":"Advanced Configuration of the sedex Client"},{"location":"client-container-v6/configuration/sedex-client-options.html#default-configuration","text":"During the very first start of the sedex Client container, the initial configuration takes place. This creates a default configuration, which can be used unchanged in most cases. Setting custom configuration parameters should rarely be necessary, but can be done as described on this page.","title":"Default configuration"},{"location":"client-container-v6/configuration/sedex-client-options.html#custom-configuration","text":"The sedex client can be configured by setting configuration parameters in the form of specific key-value pairs. These configurations parameters can be set in two ways: in the sedex Client's central configuration file as environment variables of the Docker container Environment variables of higher priority If the same key is defined both in the central configuration file and as an environment variable, the environment variable value has a higher priority and will be used. This means that environment variables override the configuration file. Both configuration types are described in more detail in the following.","title":"Custom Configuration"},{"location":"client-container-v6/configuration/sedex-client-options.html#via-the-central-sedex-client-configuration-file","text":"Custom configuration parameters can be set in the central sedex Client configuration file (\"sedex-client-configuration.properties). Specific key-value pairs can be set using the configuration file as follows: With a text editor (e.g. \"nano\" or \"notepad\") open the central sedex Client configuration file named \"sedex-lient-configuration.properties\" located in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/sedex Client-configuration.properties Add the necessary configuration parameter(s) to the configuration file and save it. key_name_1=value_1 key_name_2=value_2 Restart the sedex Client container in order to activate the new configuration","title":"Via the central sedex Client configuration file"},{"location":"client-container-v6/configuration/sedex-client-options.html#via-docker-container-environment-variables","text":"Custom configuration parameters can be set via environment variables of the Docker container. Specific key-value pairs can be set using environment variables as follows: Stop & Delete the current sedex Client container $ docker stop sedex-client $ docker rm sedex-client Run the sedex Client container and add the necessary configuration parameter(s) as environment variables $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex-client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ --env KEY_NAME_1=VALUE_1 \\ --env KEY_NAME_2=VALUE_2 \\ sedexch/sedex-client:latest","title":"Via Docker Container Environment Variables"},{"location":"client-container-v6/configuration/sedex-client-options.html#available-configuration-parameters-for-the-sedex-client","text":"The following configuration parameters for the sedex client are available.","title":"Available Configuration Parameters for the sedex Client"},{"location":"client-container-v6/configuration/sedex-client-options.html#internet-access-via-http-proxy","text":"If an HTTP proxy is required to access the Internet, such a proxy server can be added as a custom configuration # Proxy settings: Set these values only if you reach the Internet in your network only through a proxy # Example: host=proxy.example.ch port=8080 user=example-user password=1234 outgoing-web-proxy.host=proxy.example.ch outgoing-web-proxy.port=8080 outgoing-web-proxy.user=example-user outgoing-web-proxy.password=1234 You have no username/password? Leave the user/password parameters blank if proxy server authentication is not required.","title":"Internet access via HTTP-Proxy"},{"location":"client-container-v6/configuration/sedex-client-options.html#disable-websocket-protocol","text":"By default, the sedex Client uses the WebSocket protocol to reduce round trip times by actively notifying the client using events sent from the server to the client. In extremely rare cases (approx. 1% of all clients), the WebSocket protocol can cause communication problems with network components on the client side. If such a problem is detected, the use of WebSocket can manually be deactivated. As a result, the client can only use the so-called polling mode, which leads to longer message round trip times (about 10 minutes instead of a few seconds), but the sedex Client can still offer the basic functionality without websocket if required. If disbaling WebSocket is required, this can be achieved by adding the following custom configuration websocket.enabled=false Disable Websocket communication only if it is really necessary. Normally the web socket communication should not be disabled, as this has a negative impact on sedex's performance.","title":"Disable WebSocket protocol"},{"location":"client-container-v6/configuration/sedex-client-options.html#disable-sedex-webservice-proxy","text":"By default, the sedex Client is starting the sedex Webservice Proxy functionality. If not used, the sedex Webservice Proxy can be disabled in order to save some resources (CPU, memory). Disable the sedex Webservice Proxy by adding the following custom configuration wsproxy.start=false","title":"Disable sedex Webservice Proxy"},{"location":"client-container-v6/configuration/sedex-client-options.html#custom-sedex-webservice-proxy-endpoints","text":"Normally the definitions of the web services offered by the sedex Web Service Proxy are automatically provisioned and require no manual configuration. But if you are developing or testing a new web service that should be offered via sedex Web Service Proxy, it may be necessary to manually configure test instances of services. Adding the following configuration parameter overrides the endpoint for the Web service with name my-service (adapt name to your service): wsproxy.services.my-service.target-url=https://www.example.com/path Example: override the endpoint of the web service UPIQueryService: wsproxy.services.UPIQueryService.target-url=https://wupi-test.zas.admin.ch/wupi_cc/UPIQueryService If no entry is made for a particular service, the default endpoint defined by sedex is used. Note: If the custom endpoint of a Web service requires a custom SSL/TLS-certificate not contained in the standard sedex truststore, you can override the default truststore as follows. Copy your custom SSL/TLS-certificate (e.g. upiquery-test.cer) into the local certificate folder of your sedex Client: $ cp /path/to/yourTLSCert.cer /path/to/sedex-data/conf/certificates/upiquery-test.cer Add the following configuration parameter referencing your certificate file: wsproxy.services.UPIQueryService.target-tls-certificate-filename=upiquery-test.cer","title":"Custom sedex Webservice Proxy endpoints"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html","text":"Advanced Configuration of the sedex Web Service Proxy In the following, you will find how you can configure sedex Webservice Proxy and which parameters are available for this purpose. If you are only using asynchronous sedex messaging, this page is not relevant for you. Purpose of the Web Service Proxy The web service proxy (WS-Proxy) is an add-on component of the sedex Client offering local access to defined remote Web services. For the business application it looks as if the sedex web service proxy would offer the web service. In fact, the sedex WS-Proxy is only an intermediary between the application and the actual web service. To establish a secure SSL/TLS connection to the actual web service, the WS-Proxy uses the participant's sedex certificate. This allows the service provider to unambiguously identify the caller and to check whether this caller is authorized to use the service or not. Configuring Web Service Proxy The WS proxy is configured like the sedex Client is configured. See Configuration of the sedex Client for details. In this section, the configuration parameters specific to the WS-Proxy are described. Enabling & disabling Web Service Proxy The following configuration shows an activated WS-Proxy (default value): wsproxy.start=true The following configuration shows a deactivated WS-Proxy: wsproxy.start=false Checking if Web service proxy is active On the monitoring page of a running sedex Client, you can check whether the WS-Proxy is active. If at least some of the \u201cwsp\u201d elements shown below are contained, the web service proxy is active. If there are no entries starting with the prefix \u201cwsp-\u201c, then the WS-Proxy is not active. [...] wsp-https-port=8443 wsp-https-tls-certificate-subject=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-issuer=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-create-date=2019-12-04T12:43:54 wsp-https-tls-certificate-expiry-date=2024-12-02T12:43:54 wsp-https-tls-certificate-alternative-names=wsproxy,localhost wsp-https-tls-certificate-is-valid=true wsp-http-disabled=false wsp-http-port=8080 wsp-uptime=00:05:55 wsp-users-allow-anonymous=true wsp-version=WsProxy 6.0.0 wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true wsp-webservice-last-call=controller-uptime=00:06:00 [...] Disabling Anonymous Access Regarding access control there are two basic types of web services: Unrestricted webservices - allowing anonymous access\\ These are web services that are open for everybody with network access to the WS-Proxy. This means that a business application can call the web service via WS-Proxy without indicating a username and password. One says that such a caller is anonymous to the WS-Proxy. Restricted webservices - requiring an authenticated and authorized user\\ These are web services that are restricted to a group of known and authorized users. This means that a business application can only call the web service together with a valid username & password combination. One says that such a caller is authenticated by the WS-Proxy. Once authenticated, a user can be authorized, i.e. it can be checked whether he has the right to use the service or not. The web service definitions provided by sedex determine which web service may be called anonymously and which not. If it is desired for security reasons to completely deactivate anonymous access to webservices, this can be achieved with the following configuration parameter: wsproxy.users.allowAnonymous=false Note: If anonymous access is switched off, all accesses from business applications to web services must be made via the https protocol and with user name & password. Local Network Endpoints Configuration The sedex WS-Proxy offers two separate network endpoints where business applications can send their web service requests to: Endpoint for access using http (unsecured) \\ Web service requests and responses are transmitted using the http protocol . This means that the communication between the business application and the WS-Proxy is open/unsecured. Up to version 5.3 the sedex WS-Proxy only offered this endpoint. Endpoint for access using https (secured) \\ Web service requests and responses are transmitted using the https protocol . This means that the communication between the business application and the WS-Proxy is cryptographically secured using SSL/TLS . As of version 6.0, the sedex WS proxy also offers this endpoint. This endpoint should be preferred. Note: The web service definitions provided by sedex determine which web service may be called over http and which not. Check the monitoring page of the sedex Client to see which web services are available over http and which are only available over https. Note: Even when the business applications accesses the WS-Proxy via unencrypted http, the connection between the WS-Proxy and the effective web service over th eInternet is always secured and encrypted via https. The properties allowing the configuration of the http and https endpoints are described below. Unsecured http port The unsecured http port number on the inside of the container is 8080. You can publish/map this port to the desired port number on the outside using your container platform. Note: You can omit this port publication/mapping if the WS-Proxy will not be used or will only be used via https. --publish YOUR_WS_PROXY_HTTP_PORT:8080 Secured https port The secured https port number on the inside of the container is 8443. You can publish/map this port to the desired port number on the outside using your container platform. --publish YOUR_WS_PROXY_HTTPS_PORT:8443 SSL/TLS Certificate Configuration As of version 6.0, the WS-Proxy offers the possibility of a secure communication between the business application and the WS-Proxy using https protocol. The https protocol is based on SSL/TLS standard for the cryptographic protection of the communication channel. This requires a special SSL/TLS certificate to be installed and configured in the WS-Proxy. Basically two types of SSL/TLS certificates can be used: Generated by the sedex Client (self-signed certificate) \\ If the client is started and no SSL/TLS certificate is configured, the client automatically generates a new self-signed certificate. Existing certificate provided by the operator (may be an official SSL/TLS certificate) \\ The operator of a sedex Client can obtain and use an official SSL/TLS certificate from a certificate provider and configure this in the sedex Client. Note: A self-signed certificate is a certificate that is not signed by a public and generally trusted certificate authority (CA). These certificates are easy to make and are free. A disadvantage of self-signed certificates is that they are not automatically trusted. This means that such certificates must always be added manually to the trust store of a user \u2013 here the business application calling the WS-Proxy. Using the self-signed certificate generated by the sedex Client If the sedex Client does not find an SSL/TLS certificate for the WS proxy at startup, it automatically generates and configures a self-signed certificate. Notes regarding the self-signed certificate: The self-signed certificate is valid for 5 years. You can find the expiration date on the monitoring page of the sedex Client. If you want to recreate the certificate, simply delete the path to the certificate from the property in the configuration file:\\ wsproxy.https.key-store-file= The generated certificate is valid for all host names that the sedex Client could automatically detect. The WS-Proxy writes these host names to the log file during the creation of the self-signed certificate. Alternately, you can open and examine the certificate. To create a self-signed certificate with an additional host name of your choice do the following steps: 1. add the parameter wsproxy.https.hostname=your-host-name 2. Delete the value of the parameter wsproxy.https.key-store-file= 3. Let the the certificate be recreated by restarting the sedex Client The generated certificate is valid for all host names that the sedex Client could automatically detect. The keystore file generated for the self-signed certificate is in P12 format and is stored under the following path: sedex-data/conf/certificates Additionally a CER file containing the public certificate is created. You can pass this file on to the developers or operators of the business application so that they can include the self-signed certificate in their trust store. Using an existing certificate provided by the operator If you already have a valid SSL/TLS certificate, the WS proxy can be configured to use it for its https endpoint. In order to use your own certificate, it must be in one of the following formats: - PKCS#12 (p12 file) - Java Key Store (jks file) Note: The keystore provided must contain both the private key and the certificate under the same alias name. Tip: The freely available Java based tool \u201cKeyStore Explorer\u201d (https://keystore-explorer.org) allows the comfortable editing of Keystore files. Among other things, you can create a keystore from private keys and certificates in separate files, which can then be used by WS-Proxy. Once you have your own SSL/TLS certificate in a supported format, you can install and configure it in the sedex Client as follows: Copy your keystore file (e.g. my-ssl-keystore.p12) into the sedex Client configuration folder for certificates:\\ sedex-data/conf/certificates/my-ssl-keystore.p12 Configure your keystore file in the sedex Client\u2019s main configuration file: - *Path to the keystore file* wsproxy.https.key-store-file=my-ssl-keystore.p12 - *Password with which the keystore file is secured* wsproxy.https.key-store-password=myKeystorePassword - *Alias name of the key to use* A keystore file may contain one or many private keys. To select the correct key, its alias name must be specified. If you don't know the alias name, you can examine the content of the keystore with a suitable tool (e.g. with the KeyStore Explorer mentioned above). wsproxy.https.key-alias=my-key-alias - *Password for accessing the key to use* Within a keystore, a separate password can be set again for each key. If no separate password has been set for the key, enter the password for the keystore again here. wsproxy.https.key-password=myPrivatePasswordForTheKey Restart the sedex Client and check the log file of WS-Proxy for errors. Administering Web Service Proxy Users As of sedex Client version 6.0, the sedex WS-Proxy supports the feature to restrict access to the web services it offers. This means that a business application can only call the web service if it has a valid username & password combination. The allowed usernames and their passwords are contained in a separate WS-Proxy user configuration file. This sections describes the content and the basic administration of the WS-Proxy user configuration file. The WS-Proxy User Configuration File Usernames and passwords are configured in the following user configuration file: sedex-data/conf/sedex-wsproxy-user-configuration.properties This is an excerpt from the configuration file showing two configured users: # File: sedex-wsproxy-user-configuration.properties [\u2026] example-app-1=myNewAndSecurePassword,3-CH-55438 example-app-2={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-2874423 [\u2026] The format of the entries in the configuration file is as follows: user_name=password,sedex-id The elements of an entry (i.e. line of the configuration file) in detail are: - user_name: A freely definable username that represents your application calling the sedex webservice proxy. Allowed characters: a-z, A-Z, 0-9, -, _ - password: The password of the user. Allowed characters: a-z, A-Z, 0-9, -, _ - sedex-id: The associated sedex ID is that of the physical or logical sedex participant for whom the remote Web service is called. The specific sedex-id to be used is provided either by your sedex domain administrator or by FSO\u2019s sedex customer support. Please note: - Changes to the users file only become active after a restart of the sedex Client. - New passwords can be specified in plain text. - For security reasons, plain text passwords are automatically encrypted during a restart of the sedex Client. - Encrypted passwords will look like: {bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxgk98zwNAUWPOa1nGgot01wldBVam - A once encrypted and forgotten password has to be reset by deleting the old encrypted password (including the {bcrypt} part} and replacing it by a new password in plain text. Add a new user If a new business application (e.g. named \u00abmyApp\u00bb) needs access to one or more web services via sedex WS-Proxy, a new user representing this application has to be added to the user configuration file: Open the user configuration file in a text editor Add a line for the new user (e.g. at the end of the file): myApp=aRandomPassword,sedexIdOfThisApplication Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors or warnings Change the password of a user The password of a user can be changed as follows: Open the user configuration file in a text editor For the intended user change the password element as shown below.\\ \\ Before (with the old encrypted password): myApp={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-3322 After (with the new plain password): myApp=aNewRandomPassword,1-CH-3322 Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors.\\ You should see a line indicating that a previously plain password has been encrypted: Provided Web Services Automatic Provisioning of Webservice Definitions The web service definitions are automatically retrieved from the sedex server by the sedex Client and updated regularly. To ensure that the WS proxy still functions even if the sedex server cannot be reached, the web service definitions are cached locally by the sedex Client. This cache can be used for a maximum of one week. If the list of Web service definitions cannot be updated for more than a week, the Web service proxy stops its service with an error message in the log and the Web service responses. The information as to whether the web service definitions can be updated and how long they are valid can be taken from the client\u2019s monitoring page: [\u2026] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true [\u2026] List of provided Web Services The list of web services offered on a WS-Proxy differs from sedex participant to sedex participant and depends on the rights configured on the sedex server for this participant. The list of Web services currently available for a specific client can be viewed via its monitoring page. The following excerpt shows four defined webservices: [\u2026] wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] [\u2026] The elements of a web service definition are: URL Path on the WS-Proxy Path of the Web service on the WS proxy. The complete URL of the Web service is therefore derived from the protocol, host name, port, and this path as in the following example: https://myWsProxyHost:8443/wsproxy/services/CheckSedexWebService Supported protocols Specifies which protocols can be used to call the Web service via WS proxy. Possible are http (unsecured) and https (secured). Access control Specifies whether the web service can be called anonymously via WS proxy or exclusively with user name & password. Possible are anonymous and authorized.","title":"sedex Web Service Proxy"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#advanced-configuration-of-the-sedex-web-service-proxy","text":"In the following, you will find how you can configure sedex Webservice Proxy and which parameters are available for this purpose. If you are only using asynchronous sedex messaging, this page is not relevant for you.","title":"Advanced Configuration of the sedex Web Service Proxy"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#purpose-of-the-web-service-proxy","text":"The web service proxy (WS-Proxy) is an add-on component of the sedex Client offering local access to defined remote Web services. For the business application it looks as if the sedex web service proxy would offer the web service. In fact, the sedex WS-Proxy is only an intermediary between the application and the actual web service. To establish a secure SSL/TLS connection to the actual web service, the WS-Proxy uses the participant's sedex certificate. This allows the service provider to unambiguously identify the caller and to check whether this caller is authorized to use the service or not.","title":"Purpose of the Web Service Proxy"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#configuring-web-service-proxy","text":"The WS proxy is configured like the sedex Client is configured. See Configuration of the sedex Client for details. In this section, the configuration parameters specific to the WS-Proxy are described.","title":"Configuring Web Service Proxy"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#enabling-disabling-web-service-proxy","text":"The following configuration shows an activated WS-Proxy (default value): wsproxy.start=true The following configuration shows a deactivated WS-Proxy: wsproxy.start=false","title":"Enabling &amp; disabling Web Service Proxy"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#checking-if-web-service-proxy-is-active","text":"On the monitoring page of a running sedex Client, you can check whether the WS-Proxy is active. If at least some of the \u201cwsp\u201d elements shown below are contained, the web service proxy is active. If there are no entries starting with the prefix \u201cwsp-\u201c, then the WS-Proxy is not active. [...] wsp-https-port=8443 wsp-https-tls-certificate-subject=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-issuer=CN=sedex-wsproxy, O=sedex (www.sedex.ch) wsp-https-tls-certificate-create-date=2019-12-04T12:43:54 wsp-https-tls-certificate-expiry-date=2024-12-02T12:43:54 wsp-https-tls-certificate-alternative-names=wsproxy,localhost wsp-https-tls-certificate-is-valid=true wsp-http-disabled=false wsp-http-port=8080 wsp-uptime=00:05:55 wsp-users-allow-anonymous=true wsp-version=WsProxy 6.0.0 wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true wsp-webservice-last-call=controller-uptime=00:06:00 [...]","title":"Checking if Web service proxy is active"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#disabling-anonymous-access","text":"Regarding access control there are two basic types of web services: Unrestricted webservices - allowing anonymous access\\ These are web services that are open for everybody with network access to the WS-Proxy. This means that a business application can call the web service via WS-Proxy without indicating a username and password. One says that such a caller is anonymous to the WS-Proxy. Restricted webservices - requiring an authenticated and authorized user\\ These are web services that are restricted to a group of known and authorized users. This means that a business application can only call the web service together with a valid username & password combination. One says that such a caller is authenticated by the WS-Proxy. Once authenticated, a user can be authorized, i.e. it can be checked whether he has the right to use the service or not. The web service definitions provided by sedex determine which web service may be called anonymously and which not. If it is desired for security reasons to completely deactivate anonymous access to webservices, this can be achieved with the following configuration parameter: wsproxy.users.allowAnonymous=false Note: If anonymous access is switched off, all accesses from business applications to web services must be made via the https protocol and with user name & password.","title":"Disabling Anonymous Access"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#local-network-endpoints-configuration","text":"The sedex WS-Proxy offers two separate network endpoints where business applications can send their web service requests to: Endpoint for access using http (unsecured) \\ Web service requests and responses are transmitted using the http protocol . This means that the communication between the business application and the WS-Proxy is open/unsecured. Up to version 5.3 the sedex WS-Proxy only offered this endpoint. Endpoint for access using https (secured) \\ Web service requests and responses are transmitted using the https protocol . This means that the communication between the business application and the WS-Proxy is cryptographically secured using SSL/TLS . As of version 6.0, the sedex WS proxy also offers this endpoint. This endpoint should be preferred. Note: The web service definitions provided by sedex determine which web service may be called over http and which not. Check the monitoring page of the sedex Client to see which web services are available over http and which are only available over https. Note: Even when the business applications accesses the WS-Proxy via unencrypted http, the connection between the WS-Proxy and the effective web service over th eInternet is always secured and encrypted via https. The properties allowing the configuration of the http and https endpoints are described below. Unsecured http port The unsecured http port number on the inside of the container is 8080. You can publish/map this port to the desired port number on the outside using your container platform. Note: You can omit this port publication/mapping if the WS-Proxy will not be used or will only be used via https. --publish YOUR_WS_PROXY_HTTP_PORT:8080 Secured https port The secured https port number on the inside of the container is 8443. You can publish/map this port to the desired port number on the outside using your container platform. --publish YOUR_WS_PROXY_HTTPS_PORT:8443","title":"Local Network Endpoints Configuration"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#ssltls-certificate-configuration","text":"As of version 6.0, the WS-Proxy offers the possibility of a secure communication between the business application and the WS-Proxy using https protocol. The https protocol is based on SSL/TLS standard for the cryptographic protection of the communication channel. This requires a special SSL/TLS certificate to be installed and configured in the WS-Proxy. Basically two types of SSL/TLS certificates can be used: Generated by the sedex Client (self-signed certificate) \\ If the client is started and no SSL/TLS certificate is configured, the client automatically generates a new self-signed certificate. Existing certificate provided by the operator (may be an official SSL/TLS certificate) \\ The operator of a sedex Client can obtain and use an official SSL/TLS certificate from a certificate provider and configure this in the sedex Client. Note: A self-signed certificate is a certificate that is not signed by a public and generally trusted certificate authority (CA). These certificates are easy to make and are free. A disadvantage of self-signed certificates is that they are not automatically trusted. This means that such certificates must always be added manually to the trust store of a user \u2013 here the business application calling the WS-Proxy. Using the self-signed certificate generated by the sedex Client If the sedex Client does not find an SSL/TLS certificate for the WS proxy at startup, it automatically generates and configures a self-signed certificate. Notes regarding the self-signed certificate: The self-signed certificate is valid for 5 years. You can find the expiration date on the monitoring page of the sedex Client. If you want to recreate the certificate, simply delete the path to the certificate from the property in the configuration file:\\ wsproxy.https.key-store-file= The generated certificate is valid for all host names that the sedex Client could automatically detect. The WS-Proxy writes these host names to the log file during the creation of the self-signed certificate. Alternately, you can open and examine the certificate. To create a self-signed certificate with an additional host name of your choice do the following steps: 1. add the parameter wsproxy.https.hostname=your-host-name 2. Delete the value of the parameter wsproxy.https.key-store-file= 3. Let the the certificate be recreated by restarting the sedex Client The generated certificate is valid for all host names that the sedex Client could automatically detect. The keystore file generated for the self-signed certificate is in P12 format and is stored under the following path: sedex-data/conf/certificates Additionally a CER file containing the public certificate is created. You can pass this file on to the developers or operators of the business application so that they can include the self-signed certificate in their trust store. Using an existing certificate provided by the operator If you already have a valid SSL/TLS certificate, the WS proxy can be configured to use it for its https endpoint. In order to use your own certificate, it must be in one of the following formats: - PKCS#12 (p12 file) - Java Key Store (jks file) Note: The keystore provided must contain both the private key and the certificate under the same alias name. Tip: The freely available Java based tool \u201cKeyStore Explorer\u201d (https://keystore-explorer.org) allows the comfortable editing of Keystore files. Among other things, you can create a keystore from private keys and certificates in separate files, which can then be used by WS-Proxy. Once you have your own SSL/TLS certificate in a supported format, you can install and configure it in the sedex Client as follows: Copy your keystore file (e.g. my-ssl-keystore.p12) into the sedex Client configuration folder for certificates:\\ sedex-data/conf/certificates/my-ssl-keystore.p12 Configure your keystore file in the sedex Client\u2019s main configuration file: - *Path to the keystore file* wsproxy.https.key-store-file=my-ssl-keystore.p12 - *Password with which the keystore file is secured* wsproxy.https.key-store-password=myKeystorePassword - *Alias name of the key to use* A keystore file may contain one or many private keys. To select the correct key, its alias name must be specified. If you don't know the alias name, you can examine the content of the keystore with a suitable tool (e.g. with the KeyStore Explorer mentioned above). wsproxy.https.key-alias=my-key-alias - *Password for accessing the key to use* Within a keystore, a separate password can be set again for each key. If no separate password has been set for the key, enter the password for the keystore again here. wsproxy.https.key-password=myPrivatePasswordForTheKey Restart the sedex Client and check the log file of WS-Proxy for errors.","title":"SSL/TLS Certificate Configuration"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#administering-web-service-proxy-users","text":"As of sedex Client version 6.0, the sedex WS-Proxy supports the feature to restrict access to the web services it offers. This means that a business application can only call the web service if it has a valid username & password combination. The allowed usernames and their passwords are contained in a separate WS-Proxy user configuration file. This sections describes the content and the basic administration of the WS-Proxy user configuration file.","title":"Administering Web Service Proxy Users"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#the-ws-proxy-user-configuration-file","text":"Usernames and passwords are configured in the following user configuration file: sedex-data/conf/sedex-wsproxy-user-configuration.properties This is an excerpt from the configuration file showing two configured users: # File: sedex-wsproxy-user-configuration.properties [\u2026] example-app-1=myNewAndSecurePassword,3-CH-55438 example-app-2={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-2874423 [\u2026] The format of the entries in the configuration file is as follows: user_name=password,sedex-id The elements of an entry (i.e. line of the configuration file) in detail are: - user_name: A freely definable username that represents your application calling the sedex webservice proxy. Allowed characters: a-z, A-Z, 0-9, -, _ - password: The password of the user. Allowed characters: a-z, A-Z, 0-9, -, _ - sedex-id: The associated sedex ID is that of the physical or logical sedex participant for whom the remote Web service is called. The specific sedex-id to be used is provided either by your sedex domain administrator or by FSO\u2019s sedex customer support. Please note: - Changes to the users file only become active after a restart of the sedex Client. - New passwords can be specified in plain text. - For security reasons, plain text passwords are automatically encrypted during a restart of the sedex Client. - Encrypted passwords will look like: {bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxgk98zwNAUWPOa1nGgot01wldBVam - A once encrypted and forgotten password has to be reset by deleting the old encrypted password (including the {bcrypt} part} and replacing it by a new password in plain text.","title":"The WS-Proxy User Configuration File"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#add-a-new-user","text":"If a new business application (e.g. named \u00abmyApp\u00bb) needs access to one or more web services via sedex WS-Proxy, a new user representing this application has to be added to the user configuration file: Open the user configuration file in a text editor Add a line for the new user (e.g. at the end of the file): myApp=aRandomPassword,sedexIdOfThisApplication Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors or warnings","title":"Add a new user"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#change-the-password-of-a-user","text":"The password of a user can be changed as follows: Open the user configuration file in a text editor For the intended user change the password element as shown below.\\ \\ Before (with the old encrypted password): myApp={bcrypt}$2a$10$f/du7KAWE0xVu.a9DrRKN.fBxg[\u2026]1wldBVam,1-CH-3322 After (with the new plain password): myApp=aNewRandomPassword,1-CH-3322 Save the configuration file Restart sedex Client Check the log file of WS-Proxy for errors.\\ You should see a line indicating that a previously plain password has been encrypted:","title":"Change the password of a user"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#provided-web-services","text":"","title":"Provided Web Services"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#automatic-provisioning-of-webservice-definitions","text":"The web service definitions are automatically retrieved from the sedex server by the sedex Client and updated regularly. To ensure that the WS proxy still functions even if the sedex server cannot be reached, the web service definitions are cached locally by the sedex Client. This cache can be used for a maximum of one week. If the list of Web service definitions cannot be updated for more than a week, the Web service proxy stops its service with an error message in the log and the Web service responses. The information as to whether the web service definitions can be updated and how long they are valid can be taken from the client\u2019s monitoring page: [\u2026] wsp-webservice-definitions-updated-at=2019-12-04T13:15:43 wsp-webservice-definitions-expires-at=2019-12-05T13:15:43 wsp-webservice-definitions-update-status=OK wsp-webservice-definitions-update-info=Updated successfully wsp-webservice-definitions-valid=true [\u2026]","title":"Automatic Provisioning of Webservice Definitions"},{"location":"client-container-v6/configuration/sedex-web-service-proxy-options.html#list-of-provided-web-services","text":"The list of web services offered on a WS-Proxy differs from sedex participant to sedex participant and depends on the rights configured on the sedex server for this participant. The list of Web services currently available for a specific client can be viewed via its monitoring page. The following excerpt shows four defined webservices: [\u2026] wsp-webservice=/wsproxy/services/CheckSedexWebService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/PartnerServices [protocols:https] [users:authorized] wsp-webservice=/wsproxy/services/sedexExternalAuthorisationService [protocols:http,https] [users:anonymous,authorized] wsp-webservice=/wsproxy/services/ZRWebserv/getNNSS [protocols:https] [users:authorized] [\u2026] The elements of a web service definition are: URL Path on the WS-Proxy Path of the Web service on the WS proxy. The complete URL of the Web service is therefore derived from the protocol, host name, port, and this path as in the following example: https://myWsProxyHost:8443/wsproxy/services/CheckSedexWebService Supported protocols Specifies which protocols can be used to call the Web service via WS proxy. Possible are http (unsecured) and https (secured). Access control Specifies whether the web service can be called anonymously via WS proxy or exclusively with user name & password. Possible are anonymous and authorized.","title":"List of provided Web Services"},{"location":"client-container-v6/initial-configuration/initial_configuration_case_identification.html","text":"Phase 1: Initial Configuration If you are starting from scratch, i.e. you have never started a sedex Client as a Docker container for the participant before, then you must first execute the Phase 1 which is the Initial Configuration . During this one time configuration process, the container will automatically prepare the external permanent data storage by creating the required directory structure and configuration files based on an initial configuration file you have to provide. Initial Configuration File (\"init.conf\") In order to execute the initial configuration process , you have to provide a prepared initial configuration file (\"init.conf\"). The format of this file is plain text and has to contain the initial configuration parameters . The exact parameters to be listed in this \"init.conf\" file depend on whether you already have a sedex participant certificate or not. Identify your Case of Initial Configuration The content of the initial configuration file \"init.conf\" depends on the type of credentials you have for the participant. You will find yourself in one of the following two cases: Case a) Initial configuration for an existing sedex participant: Follow the instructions for Case a) if a sedex Client has been running in another installation (Container and non-Container) for your participant before. Thus a sedex participant-certificate (the P12 file) and a corresponding password already exist and must be reused. Case b) Initial configuration for a new sedex participant: Follow the instructions for Case b) if no sedex Client has been running for your participant before. Thus there is no participant-certificate yet but a so-called certificate request id (CRID) and a corresponding one time password (OTP) .","title":"Identify your Init Case"},{"location":"client-container-v6/initial-configuration/initial_configuration_case_identification.html#phase-1-initial-configuration","text":"If you are starting from scratch, i.e. you have never started a sedex Client as a Docker container for the participant before, then you must first execute the Phase 1 which is the Initial Configuration . During this one time configuration process, the container will automatically prepare the external permanent data storage by creating the required directory structure and configuration files based on an initial configuration file you have to provide.","title":"Phase 1: Initial Configuration"},{"location":"client-container-v6/initial-configuration/initial_configuration_case_identification.html#initial-configuration-file-initconf","text":"In order to execute the initial configuration process , you have to provide a prepared initial configuration file (\"init.conf\"). The format of this file is plain text and has to contain the initial configuration parameters . The exact parameters to be listed in this \"init.conf\" file depend on whether you already have a sedex participant certificate or not.","title":"Initial Configuration File (\"init.conf\")"},{"location":"client-container-v6/initial-configuration/initial_configuration_case_identification.html#identify-your-case-of-initial-configuration","text":"The content of the initial configuration file \"init.conf\" depends on the type of credentials you have for the participant. You will find yourself in one of the following two cases: Case a) Initial configuration for an existing sedex participant: Follow the instructions for Case a) if a sedex Client has been running in another installation (Container and non-Container) for your participant before. Thus a sedex participant-certificate (the P12 file) and a corresponding password already exist and must be reused. Case b) Initial configuration for a new sedex participant: Follow the instructions for Case b) if no sedex Client has been running for your participant before. Thus there is no participant-certificate yet but a so-called certificate request id (CRID) and a corresponding one time password (OTP) .","title":"Identify your Case of Initial Configuration"},{"location":"client-container-v6/initial-configuration/initial_configuration_optional_parameters.html","text":"Optional Parameters of Initial Configuration Defining an outgoing HTTP-proxy in the init.conf If an HTTP proxy is required to access the Internet, such a proxy server can optionally be entered already at the initial configuration phase in the file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... OUTGOING_WEB_PROXY_HOST=proxy.example.ch OUTGOING_WEB_PROXY_PORT=8080 OUTGOING_WEB_PROXY_USER=example-user OUTGOING_WEB_PROXY_PASSWORD=1234 No username/password If no user name is required, the two optional parameters OUTGOING_WEB_PROXY_USER and OUTGOING_WEB_PROXY_PASSWORD can be omitted. Configure http proxy later on An http proxy can also be configured after initial configuration at any time (see Advanced Configuration of the sedex Client ). Disabling the Web Service Proxy in the init.conf If the functionality of the sedex web service proxy for secure access to defined web services is not used, it can already be deactivated at the very beginning during the initial configuration phase in the initial configuration file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... WSPROXY_START=false Default value is true If this parameter is missing in init.conf a default value of \"true\" will be set in the configuration file. Re-enabling Web Service Proxy If the usage of the web service proxy should be required later, it can also be activated after initial configuration at any time (see Advanced Configuration of the sedex Client ).","title":"Optional Init Parameters"},{"location":"client-container-v6/initial-configuration/initial_configuration_optional_parameters.html#optional-parameters-of-initial-configuration","text":"","title":"Optional Parameters of Initial Configuration"},{"location":"client-container-v6/initial-configuration/initial_configuration_optional_parameters.html#defining-an-outgoing-http-proxy-in-the-initconf","text":"If an HTTP proxy is required to access the Internet, such a proxy server can optionally be entered already at the initial configuration phase in the file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... OUTGOING_WEB_PROXY_HOST=proxy.example.ch OUTGOING_WEB_PROXY_PORT=8080 OUTGOING_WEB_PROXY_USER=example-user OUTGOING_WEB_PROXY_PASSWORD=1234 No username/password If no user name is required, the two optional parameters OUTGOING_WEB_PROXY_USER and OUTGOING_WEB_PROXY_PASSWORD can be omitted. Configure http proxy later on An http proxy can also be configured after initial configuration at any time (see Advanced Configuration of the sedex Client ).","title":"Defining an outgoing HTTP-proxy in the init.conf"},{"location":"client-container-v6/initial-configuration/initial_configuration_optional_parameters.html#disabling-the-web-service-proxy-in-the-initconf","text":"If the functionality of the sedex web service proxy for secure access to defined web services is not used, it can already be deactivated at the very beginning during the initial configuration phase in the initial configuration file init.conf. This configuration is then included in the generated configuration of the sedex Client. Example: File: /path/to/sedex-data/conf/init.conf ... WSPROXY_START=false Default value is true If this parameter is missing in init.conf a default value of \"true\" will be set in the configuration file. Re-enabling Web Service Proxy If the usage of the web service proxy should be required later, it can also be activated after initial configuration at any time (see Advanced Configuration of the sedex Client ).","title":"Disabling the Web Service Proxy in the init.conf"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html","text":"Case a) Initial Configuration with P12-Certificate The following describes how the initial configuration of a new container installation is done for an existing participant, i.e. if you already have a sedex certificate (P12 file). Warning: Execute Initial Configuration only once The initial configuration only has to be executed just once before the very first start of the sedex Client container . If an initial configuration is performed again later, misconfigurations can result and in the worst case important data such as private keys or sedex messages can be lost. Step 1: Create a sedex-data directory Create a directory \"sedex-data\" on the local host or a network attached storage (NAS) where the sedex Client will store files that have to be persisted outside of the Docker container (ex. the sedex messaging interface directories). This directory will be used as a Docker bind mount. $ mkdir /path/to/sedex-data Step 2: Create a subdirectory conf for the configuration Create a subdirectory inside of \"sedex-data\" directory. This directory will contain all configuration files for this sedex participant. $ mkdir /path/to/sedex-data/conf Step 3: Provide the initial configuration for an existing participant Provide the existing sedex certificate file (P12) Copy the sedex keystore file (PKCS12/P12 format, containing the private key and certificate) into the \"sedex-data/conf\" subdirectory. $ cp /path/to/credentials/YOUR-CERTIFICATE-FILE.p12 /path/to/sedex-data/conf/ Provide the file with the initial configuration parameters With a text editor (e.g. \"nano\") create a plain text file named \"init.conf\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/init.conf Add the following three configuration parameters (with values adjusted to your actual data) to your \"init.conf\" file and save it: SEDEX_ID=YOUR-SEDEX-ID SEDEX_CERTIFICATE_FILENAME=YOUR-CERTIFICATE-FILE.p12 SEDEX_CERTIFICATE_PASSWORD=YOUR-PASSWORD init.conf is automatically deleted After the first successful start of the sedex Client, the file init.conf will be deleted automatically as its content will be moved to the created sedex configuration files. Configuring an outgoing http proxy If an HTTP proxy is required for access to the Internet, a proxy server can optionally be defined in the init.conf file (see section Optional Parameters ) or later be manually added as part of the configuration of the sedex Client (see section Advanced Configuration of the sedex Client ). Now everything is ready for the sedex client container to complete the initialization. The container will do this automatically on its first normal startup. So you can continue with phase 2 .","title":"Case a) With P12-Certificate"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html#case-a-initial-configuration-with-p12-certificate","text":"The following describes how the initial configuration of a new container installation is done for an existing participant, i.e. if you already have a sedex certificate (P12 file). Warning: Execute Initial Configuration only once The initial configuration only has to be executed just once before the very first start of the sedex Client container . If an initial configuration is performed again later, misconfigurations can result and in the worst case important data such as private keys or sedex messages can be lost.","title":"Case a) Initial Configuration with P12-Certificate"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html#step-1-create-a-sedex-data-directory","text":"Create a directory \"sedex-data\" on the local host or a network attached storage (NAS) where the sedex Client will store files that have to be persisted outside of the Docker container (ex. the sedex messaging interface directories). This directory will be used as a Docker bind mount. $ mkdir /path/to/sedex-data","title":"Step 1: Create a sedex-data directory"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html#step-2-create-a-subdirectory-conf-for-the-configuration","text":"Create a subdirectory inside of \"sedex-data\" directory. This directory will contain all configuration files for this sedex participant. $ mkdir /path/to/sedex-data/conf","title":"Step 2: Create a subdirectory conf for the configuration"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html#step-3-provide-the-initial-configuration-for-an-existing-participant","text":"","title":"Step 3: Provide the initial configuration for an existing participant"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html#provide-the-existing-sedex-certificate-file-p12","text":"Copy the sedex keystore file (PKCS12/P12 format, containing the private key and certificate) into the \"sedex-data/conf\" subdirectory. $ cp /path/to/credentials/YOUR-CERTIFICATE-FILE.p12 /path/to/sedex-data/conf/","title":"Provide the existing sedex certificate file (P12)"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_certificate.html#provide-the-file-with-the-initial-configuration-parameters","text":"With a text editor (e.g. \"nano\") create a plain text file named \"init.conf\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/init.conf Add the following three configuration parameters (with values adjusted to your actual data) to your \"init.conf\" file and save it: SEDEX_ID=YOUR-SEDEX-ID SEDEX_CERTIFICATE_FILENAME=YOUR-CERTIFICATE-FILE.p12 SEDEX_CERTIFICATE_PASSWORD=YOUR-PASSWORD init.conf is automatically deleted After the first successful start of the sedex Client, the file init.conf will be deleted automatically as its content will be moved to the created sedex configuration files. Configuring an outgoing http proxy If an HTTP proxy is required for access to the Internet, a proxy server can optionally be defined in the init.conf file (see section Optional Parameters ) or later be manually added as part of the configuration of the sedex Client (see section Advanced Configuration of the sedex Client ). Now everything is ready for the sedex client container to complete the initialization. The container will do this automatically on its first normal startup. So you can continue with phase 2 .","title":"Provide the file with the initial configuration parameters"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_crid_and_otp.html","text":"Case b) Initial Configuration with CRID+OTP The following describes how the initial configuration of a new container installation is done for a new participant, i.e. if you are not yet in possession of a sedex certificate (P12 file) but have a Certificate Request ID (CRID) and a One-Time-Password (OTP). Warning: Execute Initial Configuration only once The initial configuration only has to be executed just once before the very first start of the sedex Client container . If an initial configuration is performed again later, misconfigurations can result and in the worst case important data such as private keys or sedex messages can be lost. Step 1: Create a sedex-data directory Create a directory \"sedex-data\" on the local host or a network attached storage (NAS) where the sedex Client will store files that have to be persisted outside of the Docker container (ex. the sedex messaging interface directories). This directory will be used as a Docker bind mount. $ mkdir /path/to/sedex-data Step 2: Create a subdirectory conf for the configuration Create a subdirectory inside of \"sedex-data\" directory. This directory will contain all configuration files for this sedex participant. $ mkdir /path/to/sedex-data/conf Step 3: Provide the initial configuration for a new participant Provide the file with the initial configuration parameters With a text editor (e.g. \"nano\") create a plain text file named \"init.conf\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/init.conf Add the following three configuration parameters (with values adjusted to your actual data) to your \"init.conf\" file and save it: SEDEX_ID=YOUR-SEDEX-ID SEDEX_CRID=YOUR_CERTIFICATE_REQUEST_ID SEDEX_OTP=YOUR-ONE-TIME-PASSWORD init.conf is automatically deleted After the first successful start of the sedex Client, the file init.conf will be deleted automatically as its content will be moved to the created sedex configuration files. Configuring an outgoing http proxy If an HTTP proxy is required for access to the Internet, a proxy server can optionally be defined in the init.conf file (see section Optional Parameters ) or later be manually added as part of the configuration of the sedex Client (see section Advanced Configuration of the sedex Client ). Now everything is ready for the sedex client container to complete the initialization. The container will do this automatically on its first normal startup. So you can continue with phase 2 .","title":"Case b) With CRID+OTP"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_crid_and_otp.html#case-b-initial-configuration-with-cridotp","text":"The following describes how the initial configuration of a new container installation is done for a new participant, i.e. if you are not yet in possession of a sedex certificate (P12 file) but have a Certificate Request ID (CRID) and a One-Time-Password (OTP). Warning: Execute Initial Configuration only once The initial configuration only has to be executed just once before the very first start of the sedex Client container . If an initial configuration is performed again later, misconfigurations can result and in the worst case important data such as private keys or sedex messages can be lost.","title":"Case b) Initial Configuration with CRID+OTP"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_crid_and_otp.html#step-1-create-a-sedex-data-directory","text":"Create a directory \"sedex-data\" on the local host or a network attached storage (NAS) where the sedex Client will store files that have to be persisted outside of the Docker container (ex. the sedex messaging interface directories). This directory will be used as a Docker bind mount. $ mkdir /path/to/sedex-data","title":"Step 1: Create a sedex-data directory"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_crid_and_otp.html#step-2-create-a-subdirectory-conf-for-the-configuration","text":"Create a subdirectory inside of \"sedex-data\" directory. This directory will contain all configuration files for this sedex participant. $ mkdir /path/to/sedex-data/conf","title":"Step 2: Create a subdirectory conf for the configuration"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_crid_and_otp.html#step-3-provide-the-initial-configuration-for-a-new-participant","text":"","title":"Step 3: Provide the initial configuration for a new participant"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_crid_and_otp.html#provide-the-file-with-the-initial-configuration-parameters","text":"With a text editor (e.g. \"nano\") create a plain text file named \"init.conf\" in the subdirectory \"sedex-data/conf\": $ nano /path/to/sedex-data/conf/init.conf Add the following three configuration parameters (with values adjusted to your actual data) to your \"init.conf\" file and save it: SEDEX_ID=YOUR-SEDEX-ID SEDEX_CRID=YOUR_CERTIFICATE_REQUEST_ID SEDEX_OTP=YOUR-ONE-TIME-PASSWORD init.conf is automatically deleted After the first successful start of the sedex Client, the file init.conf will be deleted automatically as its content will be moved to the created sedex configuration files. Configuring an outgoing http proxy If an HTTP proxy is required for access to the Internet, a proxy server can optionally be defined in the init.conf file (see section Optional Parameters ) or later be manually added as part of the configuration of the sedex Client (see section Advanced Configuration of the sedex Client ). Now everything is ready for the sedex client container to complete the initialization. The container will do this automatically on its first normal startup. So you can continue with phase 2 .","title":"Provide the file with the initial configuration parameters"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_init-scripts.html","text":"Initial Configuration using the prepared Init-Scripts The previous pages show how the one-time initial configuration process of sedex-data can be executed manually using an init.conf file. In certain situations, it may be desirable to automate the one-time initial configuration process. To facilitate this automation, the sedex client container contains two utility init scripts. This page describes how to use these two init scripts. Initial configuration with Container Init-Scripts instead of init.conf file If the initial configuration process with manually creating an init.conf file as described in Case a) Initial Configuration with P12-Certificate and Case b) Initial Configuration with CRID+OTP is not a feasible way, one of the two provided sedex Client container init-scripts may be able to help. There is a separate init-script in the container for each of the two initialization cases. The task of the init scripts is to automatically create the file structure and the init.conf file from passed in environment parameters. Case a) Init Container for an existing participant If you already have a participant with an existing sedex participant certificate (a P12 file). Run the sedex Client container init script using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id KEYSTORE - environment variable holding the content of the keystore file (P12) in base64 encoded format KEYSTORE_PW - environment variable holding the password to the keystore file OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env KEYSTORE=CONTENT-OF-YOUR-CERTIFICATE-FILE \\ --env KEYSTORE_PW=YOUR-PASSWORD \\ sedexch/sedex-client init-container-existing-cert.sh Note: In a Linux console, the contents of the keystore file (P12) can be translated into the required base64 encoded format as follows: $ cat YOUR-CERTIFICATE-FILE.p12 | base64 Resulting output: MIIHdgIBAzCCBzwGCSqGSIb3DQEHAaCCBy0EggcpMIIHJTCCA+8GCSqGSIb3DQEHBqCCA+AwggPc AgEAMIID1QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIRYqcETINPCICAggAgIIDqJno8zFy [...] cDZCr7zStk1IBaD7WoHQqRmvlM9qJJrZsELaTflLcfo43GWGDiwX+OqTD0xo3J/EmVJ8fat/yKsM 4lnSpDFaMCMGCSqGSIb3DQEJFTEWBBTPLjUs7MQ16yQIA6BqTg4C6uxj9jAzBgkqhkiG9w0BCRQx Jh4kAEMAbABpAGUAbgB0ACAAQwBlAHIAdABpAGYAaQBjAGEAdABlMDEwITAJBgUrDgMCGgUABBSF i3kuzz/2qGFiSHGVmHe+aHbm2wQIs0UZdpNO54oCAggA Note: Since this content contains the private key of the sedex participant, it must be kept secret. This content and the corresponding password must not be visible to unauthorized persons at any time. Case b) initial configuration for a new participant If you don't have an existing certificate but a certificate request ID (CRID) and a one time password (OTP). Run the sedex Client container init script using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id CRID - environment variable holding the certificate request id (CRID) OTP - environment variable holding the one time password (OTP) OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env CRID=YOUR_CERTIFICATE_REQUEST_ID \\ --env OTP=YOUR-ONE-TIME-PASSWORD \\ sedexch/sedex-client init-container-new-cert.sh After having executed the init script, everything is initialized and ready for the sedex client container. So you can continue with phase 2 .","title":"Using Init-Scripts"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_init-scripts.html#initial-configuration-using-the-prepared-init-scripts","text":"The previous pages show how the one-time initial configuration process of sedex-data can be executed manually using an init.conf file. In certain situations, it may be desirable to automate the one-time initial configuration process. To facilitate this automation, the sedex client container contains two utility init scripts. This page describes how to use these two init scripts.","title":"Initial Configuration using the prepared Init-Scripts"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_init-scripts.html#initial-configuration-with-container-init-scripts-instead-of-initconf-file","text":"If the initial configuration process with manually creating an init.conf file as described in Case a) Initial Configuration with P12-Certificate and Case b) Initial Configuration with CRID+OTP is not a feasible way, one of the two provided sedex Client container init-scripts may be able to help. There is a separate init-script in the container for each of the two initialization cases. The task of the init scripts is to automatically create the file structure and the init.conf file from passed in environment parameters.","title":"Initial configuration with Container Init-Scripts instead of init.conf file"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_init-scripts.html#case-a-init-container-for-an-existing-participant","text":"If you already have a participant with an existing sedex participant certificate (a P12 file). Run the sedex Client container init script using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id KEYSTORE - environment variable holding the content of the keystore file (P12) in base64 encoded format KEYSTORE_PW - environment variable holding the password to the keystore file OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env KEYSTORE=CONTENT-OF-YOUR-CERTIFICATE-FILE \\ --env KEYSTORE_PW=YOUR-PASSWORD \\ sedexch/sedex-client init-container-existing-cert.sh Note: In a Linux console, the contents of the keystore file (P12) can be translated into the required base64 encoded format as follows: $ cat YOUR-CERTIFICATE-FILE.p12 | base64 Resulting output: MIIHdgIBAzCCBzwGCSqGSIb3DQEHAaCCBy0EggcpMIIHJTCCA+8GCSqGSIb3DQEHBqCCA+AwggPc AgEAMIID1QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIRYqcETINPCICAggAgIIDqJno8zFy [...] cDZCr7zStk1IBaD7WoHQqRmvlM9qJJrZsELaTflLcfo43GWGDiwX+OqTD0xo3J/EmVJ8fat/yKsM 4lnSpDFaMCMGCSqGSIb3DQEJFTEWBBTPLjUs7MQ16yQIA6BqTg4C6uxj9jAzBgkqhkiG9w0BCRQx Jh4kAEMAbABpAGUAbgB0ACAAQwBlAHIAdABpAGYAaQBjAGEAdABlMDEwITAJBgUrDgMCGgUABBSF i3kuzz/2qGFiSHGVmHe+aHbm2wQIs0UZdpNO54oCAggA Note: Since this content contains the private key of the sedex participant, it must be kept secret. This content and the corresponding password must not be visible to unauthorized persons at any time.","title":"Case a) Init Container for an existing participant"},{"location":"client-container-v6/initial-configuration/initial_configuration_with_init-scripts.html#case-b-initial-configuration-for-a-new-participant","text":"If you don't have an existing certificate but a certificate request ID (CRID) and a one time password (OTP). Run the sedex Client container init script using environment-specific values for the following options: --rm - Automatically remove the container when it exits /path/to/sedex-data - The path to the host's \"sedex-data\" directory or volume (holding the persisted data) SEDEX_ID - environment variable holding the participant's sedex id CRID - environment variable holding the certificate request id (CRID) OTP - environment variable holding the one time password (OTP) OUTGOING_WEB_PROXY_HOST - optional environment variable holding the http proxy host OUTGOING_WEB_PROXY_PORT - optional environment variable holding the http proxy port OUTGOING_WEB_PROXY_USER - optional environment variable holding the http proxy user OUTGOING_WEB_PROXY_PASSWORD - optional environment variable holding the http proxy password WSPROXY_START - optional environment variable that can be set to false, if web service proxy should not be started (default value is true) Command to run the init container: $ docker run \\ --rm \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --env SEDEX_ID=YOUR-SEDEX-ID \\ --env CRID=YOUR_CERTIFICATE_REQUEST_ID \\ --env OTP=YOUR-ONE-TIME-PASSWORD \\ sedexch/sedex-client init-container-new-cert.sh After having executed the init script, everything is initialized and ready for the sedex client container. So you can continue with phase 2 .","title":"Case b) initial configuration for a new participant"},{"location":"client-container-v6/observation/logs.html","text":"Accessing the Log Files of the sedex Client The logs of the sedex Client provide detailed information about running processes and important events. The log files should be monitored and analyzed - especially in case of errors. The following describes how to access the logs of the sedex Client. Option 1: Via Container Logs The combined sedex Client logs are written to standard output stdout and thus can be accessed using the the standard container mechanisms for logs. The following example shows how to continuously display the logs using docker logs command: $ docker logs sedex Client --follow 14:21:27 INFO Adapterlog - 14:21:27 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:21:57 INFO Adapterlog - 14:21:57 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:21:57 INFO Adapterlog - 14:21:57 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:22:27 INFO Adapterlog - 14:22:27 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:22:27 INFO Adapterlog - 14:22:27 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:22:57 INFO Adapterlog - 14:22:57 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:22:57 INFO Adapterlog - 14:22:57 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. [...] Option 2: Via sedex-data's logs subdirectory The sedex Client logs are written to specific files within subdirectories of the permanent data storage (\"sedex-data\"): logs/controller/controller-technical.log : technical log for the main component of the sedex Client logs/adapter/adapter-technical.log : technical log for the sedex messaging component (for sending/receiving sedex messages) logs/wsproxy/wsproxy-technical.log : technical log for the sedex web service proxy component (for secure access to web services) logs/error-log.csv : business log with important error events logs/receive-log.csv : business log of received sedex messages logs/send-log.csv : business log of sent sedex messages logs/wsproxy-access-log.csv : business log of secure web service calls through sedex web service proxy The following example lists the content of the sedex-data/logs folder: $ cd /path/to/sedex-data/logs $ ls adapter controller wsproxy error-log.csv receive-log.csv send-log.csv wsproxy-access-log.csv Info The log files in sedex-data/logs are automatically rotated when they reach a certain size. Older logs are renamed and numbered consecutively.","title":"Logs"},{"location":"client-container-v6/observation/logs.html#accessing-the-log-files-of-the-sedex-client","text":"The logs of the sedex Client provide detailed information about running processes and important events. The log files should be monitored and analyzed - especially in case of errors. The following describes how to access the logs of the sedex Client.","title":"Accessing the Log Files of the sedex Client"},{"location":"client-container-v6/observation/logs.html#option-1-via-container-logs","text":"The combined sedex Client logs are written to standard output stdout and thus can be accessed using the the standard container mechanisms for logs. The following example shows how to continuously display the logs using docker logs command: $ docker logs sedex Client --follow 14:21:27 INFO Adapterlog - 14:21:27 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:21:57 INFO Adapterlog - 14:21:57 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:21:57 INFO Adapterlog - 14:21:57 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:22:27 INFO Adapterlog - 14:22:27 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:22:27 INFO Adapterlog - 14:22:27 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. 14:22:57 INFO Adapterlog - 14:22:57 DEBUG ThrottlingPriorityMessageScheduler - Begin scheduling of messages 14:22:57 INFO Adapterlog - 14:22:57 DEBUG ThrottlingPriorityMessageScheduler - No new messages in outbox. Skipping scheduling of messages to be sent. [...]","title":"Option 1: Via Container Logs"},{"location":"client-container-v6/observation/logs.html#option-2-via-sedex-datas-logs-subdirectory","text":"The sedex Client logs are written to specific files within subdirectories of the permanent data storage (\"sedex-data\"): logs/controller/controller-technical.log : technical log for the main component of the sedex Client logs/adapter/adapter-technical.log : technical log for the sedex messaging component (for sending/receiving sedex messages) logs/wsproxy/wsproxy-technical.log : technical log for the sedex web service proxy component (for secure access to web services) logs/error-log.csv : business log with important error events logs/receive-log.csv : business log of received sedex messages logs/send-log.csv : business log of sent sedex messages logs/wsproxy-access-log.csv : business log of secure web service calls through sedex web service proxy The following example lists the content of the sedex-data/logs folder: $ cd /path/to/sedex-data/logs $ ls adapter controller wsproxy error-log.csv receive-log.csv send-log.csv wsproxy-access-log.csv Info The log files in sedex-data/logs are automatically rotated when they reach a certain size. Older logs are renamed and numbered consecutively.","title":"Option 2: Via sedex-data's logs subdirectory"},{"location":"client-container-v6/observation/monitoring-state.html","text":"Monitoring the State of the sedex Client It is essential to check sedex Client's state in your own operations monitoring system. The following describes how the state of the sedex Client can be observed. Via the Monitoring Page of the sedex Client The key/value pairs provided by the sedex Client for the purpose of operations monitoring can be accessed via http or via filesystem. Option 1: Via the monitoring Web page (http) The sedex Client monitoring webpage is a plain text page and is accessible via the mapped port (default 8000). $ curl http://DOCKER-HOST:8000/monitoring Option 2: Via sedex-data's monitoring subdirectory (file system) The sedex Client monitoring file is a plain text file and is located in sedex-data's monitoring subdirectory. $ cd /path/to/sedex-data/monitoring Via Container Health State The basic status of the container can also be checked via standard container health mechanisms. $ docker inspect sedex Client [...] \"State\": { \"Status\": \"running\", \"Running\": true, \"Paused\": false, \"Restarting\": false, \"OOMKilled\": false, \"Dead\": false, \"Pid\": 4804, \"ExitCode\": 0, \"Error\": \"\", \"StartedAt\": \"2021-05-10T14:31:30.906584007Z\", \"FinishedAt\": \"2021-05-06T19:53:02.091368316Z\", \"Health\": { \"Status\": \"healthy\", \"FailingStreak\": 0, [...] Note: The health state of the container is only very coarse. That's why it is recommended to include the most important key/value pairs of the of the sedex Client's monitoring page in your own operations monitoring system.","title":"Monitoring State"},{"location":"client-container-v6/observation/monitoring-state.html#monitoring-the-state-of-the-sedex-client","text":"It is essential to check sedex Client's state in your own operations monitoring system. The following describes how the state of the sedex Client can be observed.","title":"Monitoring the State of the sedex Client"},{"location":"client-container-v6/observation/monitoring-state.html#via-the-monitoring-page-of-the-sedex-client","text":"The key/value pairs provided by the sedex Client for the purpose of operations monitoring can be accessed via http or via filesystem.","title":"Via the Monitoring Page of the sedex Client"},{"location":"client-container-v6/observation/monitoring-state.html#option-1-via-the-monitoring-web-page-http","text":"The sedex Client monitoring webpage is a plain text page and is accessible via the mapped port (default 8000). $ curl http://DOCKER-HOST:8000/monitoring","title":"Option 1: Via the monitoring Web page (http)"},{"location":"client-container-v6/observation/monitoring-state.html#option-2-via-sedex-datas-monitoring-subdirectory-file-system","text":"The sedex Client monitoring file is a plain text file and is located in sedex-data's monitoring subdirectory. $ cd /path/to/sedex-data/monitoring","title":"Option 2: Via sedex-data's monitoring subdirectory (file system)"},{"location":"client-container-v6/observation/monitoring-state.html#via-container-health-state","text":"The basic status of the container can also be checked via standard container health mechanisms. $ docker inspect sedex Client [...] \"State\": { \"Status\": \"running\", \"Running\": true, \"Paused\": false, \"Restarting\": false, \"OOMKilled\": false, \"Dead\": false, \"Pid\": 4804, \"ExitCode\": 0, \"Error\": \"\", \"StartedAt\": \"2021-05-10T14:31:30.906584007Z\", \"FinishedAt\": \"2021-05-06T19:53:02.091368316Z\", \"Health\": { \"Status\": \"healthy\", \"FailingStreak\": 0, [...] Note: The health state of the container is only very coarse. That's why it is recommended to include the most important key/value pairs of the of the sedex Client's monitoring page in your own operations monitoring system.","title":"Via Container Health State"},{"location":"client-container-v6/orchestration/overview.html","text":"Running sedex Client on Orchestration Platforms like Kubernetes & Co.","title":"Running sedex Client on Orchestration Platforms like Kubernetes & Co."},{"location":"client-container-v6/orchestration/overview.html#running-sedex-client-on-orchestration-platforms-like-kubernetes-co","text":"","title":"Running sedex Client on Orchestration Platforms like Kubernetes &amp; Co."},{"location":"client-container-v6/orchestration/run_with_kubernetes.html","text":"Kubernetes & Co. The sedex Client Docker container can be run on a Kubernetes-based orchestration platform. The following points must be taken into account. Memory Allocation It is recommended to allocate at least 1GB memory for the sedex docker container. If additional containers will run within a Kubernetes Pod (e.g. side car proxies of a service mesh), their memory requirements must be added and more memory must be allocated to the Pod accordingly. Initial configuration with Init Containers instead of init.conf file Container orchestration platforms such as Kubernetes know the concept of so-called Init Containers . These utility containers are started before the actual container is started, with the task of performing initialization tasks. If the initial configuration described above (with manually creating an init.conf file) is not a feasible way, one of the two provided init containers from sedex may be able to help. There is a separate init container for each of the two initialization cases a) and b) described in the Initial Configuration with init-scripts . The task of the init containers is to create the init.conf file from passed ENV parameters. Ensure a maximum of one running client instance Due to the architecture of the sedex system, a maximum of one sedex Client may be running for a participant at any time . This must also be ensured when operating the sedex Client as a container. On an orchestration platform for each container can be defined how many instances should run. E.g. Kubernetes calls this the number of \"replicas\" . An orchestration platform can move containers to another node at any time. Usually this is done by starting a container on the new node before the old one is deactivated. This default strategy may make sense for most web applications. However, when applied to the sedex Client, this would result in two sedex Clients running for a short moment. This can be prevented by setting the replication strategy to be used. Kubernetes calls the strategy to be chosen for sedex \"Recreate\". The following is an excerpt from a Kubernetes deployment shows this aspect of configuration for a sedex Client: [ ... ] spec : replicas : 1 strategy : type : Recreate [ ... ] Persistent Volume It must be ensured that the volume for the external data storage is made persistent, i.e. has a lifetime independent of the container. This can be achieved with Kubernetes by means of a so-called persistentVolumeClaim. The following is an excerpt from a Kubernetes deployment shows this aspect of configuration for a sedex Client: [ ... ] spec : volumes : - name : sedex-client-YOUR_SEDEX_ID-volume persistentVolumeClaim : claimName : sedex-client-YOUR_SEDEX_ID-persistent-volume-claim [ ... ] Example Kubernetes Deployment Below you find a basic Kubernetes deployment file. In the first tab as template , in which you can replace the parameter YOUR_SEDEX_ID with your own sedex-ID, and in the second tab as concrete example for a fictitious sedex-ID 1-123456-1. Template apiVersion : apps/v1 kind : Deployment metadata : name : sedex-client-YOUR_SEDEX_ID-deployment labels : app : sedex-client-YOUR_SEDEX_ID spec : replicas : 1 strategy : type : Recreate selector : matchLabels : app : sedex-client-YOUR_SEDEX_ID template : metadata : labels : app : sedex-client-YOUR_SEDEX_ID spec : volumes : - name : sedex-client-YOUR_SEDEX_ID-volume persistentVolumeClaim : claimName : sedex-client-YOUR_SEDEX_ID-persistent-volume-claim containers : - name : sedex-client image : sedexch/sedex-client:latest ports : - containerPort : 8000 - containerPort : 8080 - containerPort : 8443 volumeMounts : - mountPath : \"/sedex-data\" name : sedex-client-YOUR_SEDEX_ID-volume livenessProbe : exec : command : - /opt/sedex-client/scripts/check-health.sh initialDelaySeconds : 5 periodSeconds : 5 readinessProbe : httpGet : path : /monitoring port : 8000 initialDelaySeconds : 5 periodSeconds : 5 Example (sedex-ID 1-123456-1) apiVersion : apps/v1 kind : Deployment metadata : name : sedex-client-1-123456-1-deployment labels : app : sedex-client-1-123456-1 spec : replicas : 1 strategy : type : Recreate selector : matchLabels : app : sedex-client-1-123456-1 template : metadata : labels : app : sedex-client-1-123456-1 spec : volumes : - name : sedex-client-1-123456-1-volume persistentVolumeClaim : claimName : sedex-client-1-123456-1-persistent-volume-claim containers : - name : sedex-client image : sedexch/sedex-client:latest ports : - containerPort : 8000 - containerPort : 8080 - containerPort : 8443 volumeMounts : - mountPath : \"/sedex-data\" name : sedex-client-1-123456-1-volume livenessProbe : exec : command : - /opt/sedex-client/scripts/check-health.sh initialDelaySeconds : 5 periodSeconds : 5 readinessProbe : httpGet : path : /monitoring port : 8000 initialDelaySeconds : 5 periodSeconds : 5","title":"Kubernetes & Co."},{"location":"client-container-v6/orchestration/run_with_kubernetes.html#kubernetes-co","text":"The sedex Client Docker container can be run on a Kubernetes-based orchestration platform. The following points must be taken into account.","title":"Kubernetes &amp; Co."},{"location":"client-container-v6/orchestration/run_with_kubernetes.html#memory-allocation","text":"It is recommended to allocate at least 1GB memory for the sedex docker container. If additional containers will run within a Kubernetes Pod (e.g. side car proxies of a service mesh), their memory requirements must be added and more memory must be allocated to the Pod accordingly.","title":"Memory Allocation"},{"location":"client-container-v6/orchestration/run_with_kubernetes.html#initial-configuration-with-init-containers-instead-of-initconf-file","text":"Container orchestration platforms such as Kubernetes know the concept of so-called Init Containers . These utility containers are started before the actual container is started, with the task of performing initialization tasks. If the initial configuration described above (with manually creating an init.conf file) is not a feasible way, one of the two provided init containers from sedex may be able to help. There is a separate init container for each of the two initialization cases a) and b) described in the Initial Configuration with init-scripts . The task of the init containers is to create the init.conf file from passed ENV parameters.","title":"Initial configuration with Init Containers instead of init.conf file"},{"location":"client-container-v6/orchestration/run_with_kubernetes.html#ensure-a-maximum-of-one-running-client-instance","text":"Due to the architecture of the sedex system, a maximum of one sedex Client may be running for a participant at any time . This must also be ensured when operating the sedex Client as a container. On an orchestration platform for each container can be defined how many instances should run. E.g. Kubernetes calls this the number of \"replicas\" . An orchestration platform can move containers to another node at any time. Usually this is done by starting a container on the new node before the old one is deactivated. This default strategy may make sense for most web applications. However, when applied to the sedex Client, this would result in two sedex Clients running for a short moment. This can be prevented by setting the replication strategy to be used. Kubernetes calls the strategy to be chosen for sedex \"Recreate\". The following is an excerpt from a Kubernetes deployment shows this aspect of configuration for a sedex Client: [ ... ] spec : replicas : 1 strategy : type : Recreate [ ... ]","title":"Ensure a maximum of one running client instance"},{"location":"client-container-v6/orchestration/run_with_kubernetes.html#persistent-volume","text":"It must be ensured that the volume for the external data storage is made persistent, i.e. has a lifetime independent of the container. This can be achieved with Kubernetes by means of a so-called persistentVolumeClaim. The following is an excerpt from a Kubernetes deployment shows this aspect of configuration for a sedex Client: [ ... ] spec : volumes : - name : sedex-client-YOUR_SEDEX_ID-volume persistentVolumeClaim : claimName : sedex-client-YOUR_SEDEX_ID-persistent-volume-claim [ ... ]","title":"Persistent Volume"},{"location":"client-container-v6/orchestration/run_with_kubernetes.html#example-kubernetes-deployment","text":"Below you find a basic Kubernetes deployment file. In the first tab as template , in which you can replace the parameter YOUR_SEDEX_ID with your own sedex-ID, and in the second tab as concrete example for a fictitious sedex-ID 1-123456-1. Template apiVersion : apps/v1 kind : Deployment metadata : name : sedex-client-YOUR_SEDEX_ID-deployment labels : app : sedex-client-YOUR_SEDEX_ID spec : replicas : 1 strategy : type : Recreate selector : matchLabels : app : sedex-client-YOUR_SEDEX_ID template : metadata : labels : app : sedex-client-YOUR_SEDEX_ID spec : volumes : - name : sedex-client-YOUR_SEDEX_ID-volume persistentVolumeClaim : claimName : sedex-client-YOUR_SEDEX_ID-persistent-volume-claim containers : - name : sedex-client image : sedexch/sedex-client:latest ports : - containerPort : 8000 - containerPort : 8080 - containerPort : 8443 volumeMounts : - mountPath : \"/sedex-data\" name : sedex-client-YOUR_SEDEX_ID-volume livenessProbe : exec : command : - /opt/sedex-client/scripts/check-health.sh initialDelaySeconds : 5 periodSeconds : 5 readinessProbe : httpGet : path : /monitoring port : 8000 initialDelaySeconds : 5 periodSeconds : 5 Example (sedex-ID 1-123456-1) apiVersion : apps/v1 kind : Deployment metadata : name : sedex-client-1-123456-1-deployment labels : app : sedex-client-1-123456-1 spec : replicas : 1 strategy : type : Recreate selector : matchLabels : app : sedex-client-1-123456-1 template : metadata : labels : app : sedex-client-1-123456-1 spec : volumes : - name : sedex-client-1-123456-1-volume persistentVolumeClaim : claimName : sedex-client-1-123456-1-persistent-volume-claim containers : - name : sedex-client image : sedexch/sedex-client:latest ports : - containerPort : 8000 - containerPort : 8080 - containerPort : 8443 volumeMounts : - mountPath : \"/sedex-data\" name : sedex-client-1-123456-1-volume livenessProbe : exec : command : - /opt/sedex-client/scripts/check-health.sh initialDelaySeconds : 5 periodSeconds : 5 readinessProbe : httpGet : path : /monitoring port : 8000 initialDelaySeconds : 5 periodSeconds : 5","title":"Example Kubernetes Deployment"},{"location":"client-container-v6/run/run_with_docker-compose.html","text":"Run the sedex Client with Docker Compose The following steps show how to create, run, and stop the sedex client as a container stack on a Docker host using docker-compose. Info: latest vs. specific version of the container image The instructions show how to start the most recent container image called \"latest\" . If you want to use a specific version of the container then see Configuration - Container Options for details. xxx tbd xxx","title":"Run the sedex Client with Docker Compose"},{"location":"client-container-v6/run/run_with_docker-compose.html#run-the-sedex-client-with-docker-compose","text":"The following steps show how to create, run, and stop the sedex client as a container stack on a Docker host using docker-compose. Info: latest vs. specific version of the container image The instructions show how to start the most recent container image called \"latest\" . If you want to use a specific version of the container then see Configuration - Container Options for details. xxx tbd xxx","title":"Run the sedex Client with Docker Compose"},{"location":"client-container-v6/run/run_with_docker.html","text":"Run the sedex Client with Docker We refer to Phase 2 as the normal usage of the sedex Client container. The steps below show how to create, run, and stop the sedex client as a container on a Docker host. Initialized Permanent Data Storage required The sedex client container can only be created for normal usage if an initialized permanent data storage (\"sedex-data\") exists. See Phase 1: Initial Configuration for details on how to create the storage. Create and Start the sedex Client container (Run) docker run = docker create + docker start With the Docker command docker run a new container is created and also started immediately. Thus, the run command corresponds to a composition of the commands docker create and docker start . Of course, you can use both ways to reach your goal. Run the sedex Client container using environment-specific values for the following options: /path/to/sedex-data - The path to the host's \"sedex-data\" directory (holding the persisted data) YOUR_MONITORING_PORT - The port at which the monitoring web page of the sedex Client should be accessible from the outside of the container YOUR_WS_PROXY_HTTP_PORT - The unsecured http port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used or will only be used via https. YOUR_WS_PROXY_HTTPS_PORT - The secured https port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used. --stop-timeout 65 - When the docker container is stopped (e.g. with docker stop command), the sedex Client's controller-stop.sh is executed to initiate a graceful shutdown of the client. This typically takes longer than the default 10 seconds that the Docker daemon waits before killing a container. The --stop-timeout option overrides the default. The required time will vary from one installation to another. --restart unless-stopped - Restart Policy: Restart the container automatically after Docker daemon restarts, unless the container has been stopped intentionally. -d - Detached: Start container in background without showing log output on console. To run the most current sedex Client container enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex-client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest Info: latest vs. specific version of the container image The instructions show how to start the most recent container image called \"latest\" . If you want to use a specific version of the container then see Configuration - Container Options for details. Info: sedex Client configuration After the very first start of the sedex Client container, a general default configuration is created. You find this configuration in the central configuration file of the sedex Client which is stored in the permanent data storage ( sedex-data/conf/sedex Client-configuration.properties ). If no such configuration file has been created after the very first start of the sedex Client, you can search for the cause in the Docker log file: $ docker logs sedex-client If specific configuration options are required, these can either be set in the central configuration file or as environment variables of the container. For details see section Configuration - sedex Client Options . Check Health State of the sedex Client Container The sedex client container indicates its health state. This state can be monitored and displayed with standard container means. For example with docker container ls . At the beginning the container is in the state \"health: starting\": $ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eec0d26407da sedexch/sedex-client:internal-ref-test-v2 \"./scripts/prepare-a...\" 2 hours ago Up 48 seconds (health: starting) 0.0.0.0:8000->8000/tcp, 0.0.0.0:8080->8080/tcp, 0.0.0.0:8443->8443/tcp sedex-client After some time the container is in the \"healthy\" state: $ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eec0d26407da sedexch/sedex-client:internal-ref-test-v2 \"./scripts/prepare-a...\" 2 hours ago Up 3 minutes (healthy) 0.0.0.0:8000->8000/tcp, 0.0.0.0:8080->8080/tcp, 0.0.0.0:8443->8443/tcp sedex-client Stop and start the sedex Client container Stop the sedex Client container: $ docker stop sedex-client Info Stopping a sedex client container can take up to 65 seconds. This allows the sedex client to gracefully shutdown and clean up temporary data. Start the sedex Client container: $ docker start sedex-client","title":"Run with Docker"},{"location":"client-container-v6/run/run_with_docker.html#run-the-sedex-client-with-docker","text":"We refer to Phase 2 as the normal usage of the sedex Client container. The steps below show how to create, run, and stop the sedex client as a container on a Docker host. Initialized Permanent Data Storage required The sedex client container can only be created for normal usage if an initialized permanent data storage (\"sedex-data\") exists. See Phase 1: Initial Configuration for details on how to create the storage.","title":"Run the sedex Client with Docker"},{"location":"client-container-v6/run/run_with_docker.html#create-and-start-the-sedex-client-container-run","text":"docker run = docker create + docker start With the Docker command docker run a new container is created and also started immediately. Thus, the run command corresponds to a composition of the commands docker create and docker start . Of course, you can use both ways to reach your goal. Run the sedex Client container using environment-specific values for the following options: /path/to/sedex-data - The path to the host's \"sedex-data\" directory (holding the persisted data) YOUR_MONITORING_PORT - The port at which the monitoring web page of the sedex Client should be accessible from the outside of the container YOUR_WS_PROXY_HTTP_PORT - The unsecured http port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used or will only be used via https. YOUR_WS_PROXY_HTTPS_PORT - The secured https port at which the sedex Clients Web service proxy should be accessible from the outside of the container. Note: You can omit this line if the WS-Proxy will not be used. --stop-timeout 65 - When the docker container is stopped (e.g. with docker stop command), the sedex Client's controller-stop.sh is executed to initiate a graceful shutdown of the client. This typically takes longer than the default 10 seconds that the Docker daemon waits before killing a container. The --stop-timeout option overrides the default. The required time will vary from one installation to another. --restart unless-stopped - Restart Policy: Restart the container automatically after Docker daemon restarts, unless the container has been stopped intentionally. -d - Detached: Start container in background without showing log output on console. To run the most current sedex Client container enter the following commands: $ docker pull sedexch/sedex-client:latest $ docker run \\ --name sedex-client \\ --mount type=bind,source=/path/to/sedex-data,destination=/sedex-data/ \\ --publish YOUR_MONITORING_PORT:8000 \\ --publish YOUR_WS_PROXY_HTTP_PORT:8080 \\ --publish YOUR_WS_PROXY_HTTPS_PORT:8443 \\ --stop-timeout 65 \\ --restart unless-stopped \\ -d \\ sedexch/sedex-client:latest Info: latest vs. specific version of the container image The instructions show how to start the most recent container image called \"latest\" . If you want to use a specific version of the container then see Configuration - Container Options for details. Info: sedex Client configuration After the very first start of the sedex Client container, a general default configuration is created. You find this configuration in the central configuration file of the sedex Client which is stored in the permanent data storage ( sedex-data/conf/sedex Client-configuration.properties ). If no such configuration file has been created after the very first start of the sedex Client, you can search for the cause in the Docker log file: $ docker logs sedex-client If specific configuration options are required, these can either be set in the central configuration file or as environment variables of the container. For details see section Configuration - sedex Client Options .","title":"Create and Start the sedex Client container (Run)"},{"location":"client-container-v6/run/run_with_docker.html#check-health-state-of-the-sedex-client-container","text":"The sedex client container indicates its health state. This state can be monitored and displayed with standard container means. For example with docker container ls . At the beginning the container is in the state \"health: starting\": $ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eec0d26407da sedexch/sedex-client:internal-ref-test-v2 \"./scripts/prepare-a...\" 2 hours ago Up 48 seconds (health: starting) 0.0.0.0:8000->8000/tcp, 0.0.0.0:8080->8080/tcp, 0.0.0.0:8443->8443/tcp sedex-client After some time the container is in the \"healthy\" state: $ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eec0d26407da sedexch/sedex-client:internal-ref-test-v2 \"./scripts/prepare-a...\" 2 hours ago Up 3 minutes (healthy) 0.0.0.0:8000->8000/tcp, 0.0.0.0:8080->8080/tcp, 0.0.0.0:8443->8443/tcp sedex-client","title":"Check Health State of the sedex Client Container"},{"location":"client-container-v6/run/run_with_docker.html#stop-and-start-the-sedex-client-container","text":"Stop the sedex Client container: $ docker stop sedex-client Info Stopping a sedex client container can take up to 65 seconds. This allows the sedex client to gracefully shutdown and clean up temporary data. Start the sedex Client container: $ docker start sedex-client","title":"Stop and start the sedex Client container"},{"location":"sedex-system/overview_sedex.html","text":"Overview of the sedex System The sedex platform is a client-server messaging system of the Swiss federal government that enables distributed business and e-government applications (in short end-user applications) to exchange data via the Internet. The data transfer via sedex is secure, traceable and reliable. Coponents of the sedex System The sedex messaging system can be divided into the following top level components: 1. End-user applications End-user applications that need to exchange business data (often in the form of XML documents) over the Internet. 2. sedex Client The sedex platform\u2019s decentralized component. A Java-based application that enables one or more end-user applications to exchange business data in the form of messages via the sedex platform. The sedex Client is installed, configured and run by the operator of the end-user application. You are reading the manual that describes how to do this. 3. sedex Server The sedex platform\u2019s central component via which all messages are exchanged. The sedex server is technically operated by the Federal Office of Information Technology (FOIT). Note: sedex Messaging is asynchronous by Design In practice a message may reach a recipient within about 1 minute, but that message transfer time is not guaranteed. For example, if the recipient\u2019s sedex Client is down or offline, the message may never reach the receiver. In such a case, after 30 days of no delivery, the sender will be informed by a corresponding receipt generated by the system. Therefore, it is important that the sending end-user application processes the sedex receipts.","title":"sedex System Overview"},{"location":"sedex-system/overview_sedex.html#overview-of-the-sedex-system","text":"The sedex platform is a client-server messaging system of the Swiss federal government that enables distributed business and e-government applications (in short end-user applications) to exchange data via the Internet. The data transfer via sedex is secure, traceable and reliable.","title":"Overview of the sedex System"},{"location":"sedex-system/overview_sedex.html#coponents-of-the-sedex-system","text":"The sedex messaging system can be divided into the following top level components:","title":"Coponents of the sedex System"},{"location":"sedex-system/overview_sedex.html#1-end-user-applications","text":"End-user applications that need to exchange business data (often in the form of XML documents) over the Internet.","title":"1. End-user applications"},{"location":"sedex-system/overview_sedex.html#2-sedex-client","text":"The sedex platform\u2019s decentralized component. A Java-based application that enables one or more end-user applications to exchange business data in the form of messages via the sedex platform. The sedex Client is installed, configured and run by the operator of the end-user application. You are reading the manual that describes how to do this.","title":"2. sedex Client"},{"location":"sedex-system/overview_sedex.html#3-sedex-server","text":"The sedex platform\u2019s central component via which all messages are exchanged. The sedex server is technically operated by the Federal Office of Information Technology (FOIT). Note: sedex Messaging is asynchronous by Design In practice a message may reach a recipient within about 1 minute, but that message transfer time is not guaranteed. For example, if the recipient\u2019s sedex Client is down or offline, the message may never reach the receiver. In such a case, after 30 days of no delivery, the sender will be informed by a corresponding receipt generated by the system. Therefore, it is important that the sending end-user application processes the sedex receipts.","title":"3. sedex Server"},{"location":"sedex-system/sedex-client.html","text":"sedex Client The sedex Client is a software that sedex participants install in their data center near their business applications. It is the endpoint of the sedex system and primarily allows the business applications to send and receive sedex messages. Core Functionalities of the sedex Client The sedex Client provides the following core functionalities: Secure asynchronous messaging Secure transport of sensitive data Sender-side message encryption for targeted recipients; only the recipients can decrypt the message (known as end-to-end security) Message content integrity check by means of digital signatures Reliable transport for very large data files (1 GB or higher, compressed or uncompressed) Sending/receiving of messages is nonrepudiable Audit trail of the message exchange (envelope information only) sedex Web Service Proxy Offers local access to defined remote Web services Uses the participant\u2019s sedex certificate for the secure SSL/TLS channel to the target Web service Enables the Web service provider to identify and authorize the caller Three Components of the sedex Client The sedex Client consists of three separate components (processes) which are running: 1. sedex Controller The process that controls and monitors the sedex Client\u2019s two other processes (see the next two points). For example, the sedex Controller is able to control the sedex Client processes locally and/or remotely and to perform automatic updates of the sedex Client software. 2. sedex Adapter The sedex Client\u2019s main process, offering the functions that enable the secure and reliable exchange of messages on the sedex Client side. 3. sedex Web Service Proxy An optional process that offers a secure proxy for SOAP and RESTful Web services. It is not needed for the normal sedex message exchange. Two operating models for the sedex client The sedex participants have to operate their sedex client on their own infrastructure in their data centers. Basically, the following two operating models are available to them: 1. sedex client as classic software installation The sedex client is a Java-based application that can be installed on various operating systems (including Windows, Mac OS, Linux, AIX, etc.) using a software installer. This documentation does not cover a classic software installation. If you choose this model, you must follow the instructions in the User and Installation Manual , which can be found as a PDF in the download section of www.sedex.ch . There you will also find the latest sedex client installer. 2. sedex client as (Docker) container The sedex client can also be run on a container platform such as Docker, Kubernetes, OpenShift, etc. For this purpose, sedex publishes an official container image on Docker Hub. If your organization has a stable container platform and the required knowledge, you can thus efficiently install and operate the sedex client as a container. This documentation covers the container operation model. If you choose this model, you must follow the instructions on this website carefully.","title":"sedex Client"},{"location":"sedex-system/sedex-client.html#sedex-client","text":"The sedex Client is a software that sedex participants install in their data center near their business applications. It is the endpoint of the sedex system and primarily allows the business applications to send and receive sedex messages.","title":"sedex Client"},{"location":"sedex-system/sedex-client.html#core-functionalities-of-the-sedex-client","text":"The sedex Client provides the following core functionalities:","title":"Core Functionalities of the sedex Client"},{"location":"sedex-system/sedex-client.html#secure-asynchronous-messaging","text":"Secure transport of sensitive data Sender-side message encryption for targeted recipients; only the recipients can decrypt the message (known as end-to-end security) Message content integrity check by means of digital signatures Reliable transport for very large data files (1 GB or higher, compressed or uncompressed) Sending/receiving of messages is nonrepudiable Audit trail of the message exchange (envelope information only)","title":"Secure asynchronous messaging"},{"location":"sedex-system/sedex-client.html#sedex-web-service-proxy","text":"Offers local access to defined remote Web services Uses the participant\u2019s sedex certificate for the secure SSL/TLS channel to the target Web service Enables the Web service provider to identify and authorize the caller","title":"sedex Web Service Proxy"},{"location":"sedex-system/sedex-client.html#three-components-of-the-sedex-client","text":"The sedex Client consists of three separate components (processes) which are running:","title":"Three Components of the sedex Client"},{"location":"sedex-system/sedex-client.html#1-sedex-controller","text":"The process that controls and monitors the sedex Client\u2019s two other processes (see the next two points). For example, the sedex Controller is able to control the sedex Client processes locally and/or remotely and to perform automatic updates of the sedex Client software.","title":"1. sedex Controller"},{"location":"sedex-system/sedex-client.html#2-sedex-adapter","text":"The sedex Client\u2019s main process, offering the functions that enable the secure and reliable exchange of messages on the sedex Client side.","title":"2. sedex Adapter"},{"location":"sedex-system/sedex-client.html#3-sedex-web-service-proxy","text":"An optional process that offers a secure proxy for SOAP and RESTful Web services. It is not needed for the normal sedex message exchange.","title":"3. sedex Web Service Proxy"},{"location":"sedex-system/sedex-client.html#two-operating-models-for-the-sedex-client","text":"The sedex participants have to operate their sedex client on their own infrastructure in their data centers. Basically, the following two operating models are available to them:","title":"Two operating models for the sedex client"},{"location":"sedex-system/sedex-client.html#1-sedex-client-as-classic-software-installation","text":"The sedex client is a Java-based application that can be installed on various operating systems (including Windows, Mac OS, Linux, AIX, etc.) using a software installer. This documentation does not cover a classic software installation. If you choose this model, you must follow the instructions in the User and Installation Manual , which can be found as a PDF in the download section of www.sedex.ch . There you will also find the latest sedex client installer.","title":"1. sedex client as classic software installation"},{"location":"sedex-system/sedex-client.html#2-sedex-client-as-docker-container","text":"The sedex client can also be run on a container platform such as Docker, Kubernetes, OpenShift, etc. For this purpose, sedex publishes an official container image on Docker Hub. If your organization has a stable container platform and the required knowledge, you can thus efficiently install and operate the sedex client as a container. This documentation covers the container operation model. If you choose this model, you must follow the instructions on this website carefully.","title":"2. sedex client as (Docker) container"}]}